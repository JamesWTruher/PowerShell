// THIS FILE IS MANUALLY CHANGED BASED ON THE GENERATED FILE
//
// The original file has been generated by admin\monad\src\cimSupport\cmdletization\xml\generate.ps1
// based on the following input file: d:\bluedev\admin\monad\src\cimSupport\cmdletization\xml\cmdlets-over-objects.xsd
//
// sgen.exe is called within 'generate.ps1' to generate the original file. The generated code cannot work in CoreCLR.
// This file is manually adjusted based on the generated file, so as to make it work in CoreCLR.
// The adjustment for this file includes:
//   1. We only need deseriliazation to import CDXML modules, so the serialization related code is removed.
//   2. The generated code uses XmlSerializationReader for most of its deseriliazation logic. This type is not in CoreCLR, 
//      so we need to copy the code/APIs that we depends on from .NET source code (see the Copy_From_XmlSerializationReader region below).

#if CORECLR

#pragma warning disable


namespace Microsoft.PowerShell.Cmdletization.Xml {

    using System;
    using System.Collections;
    using System.Globalization;
    using System.Xml;
    using System.Xml.Schema;

    internal class XmlSerializationReader1
    {
        #region Copy_From_XmlSerializationReader

        // The fields, properties and methods in this section are copied from XmlSerializationReader with
        // some necessary adjustment:
        //  1. XmlReader.ReadString() and XmlReader.ReadElementString() are not in CoreCLR. They are replaced by
        //     XmlReader.ReadElementContentAsString() as suggested in MSDN.
        //  2. GetXsiType(). In the context of CDXML deserialization, GetXsiType() will always return null, as all
        //     CDXML files are under the namespace "http://schemas.microsoft.com/cmdlets-over-objects/2009/11".
        //  3. ReadTypedPrimitive(XmlQualifiedName type) and ReadTypedNull(XmlQualifiedName type). See the comments
        //     in them for more information.


        #region "Constructor"

        internal XmlSerializationReader1(XmlReader reader)
        {
            this.r = reader;
            this.d = null;

            schemaNsID = r.NameTable.Add("http://www.w3.org/2001/XMLSchema");
            schemaNs2000ID = r.NameTable.Add("http://www.w3.org/2000/10/XMLSchema");
            schemaNs1999ID = r.NameTable.Add("http://www.w3.org/1999/XMLSchema");
            schemaNonXsdTypesNsID = r.NameTable.Add("http://microsoft.com/wsdl/types/");
            instanceNsID = r.NameTable.Add("http://www.w3.org/2001/XMLSchema-instance");
            instanceNs2000ID = r.NameTable.Add("http://www.w3.org/2000/10/XMLSchema-instance");
            instanceNs1999ID = r.NameTable.Add("http://www.w3.org/1999/XMLSchema-instance");
            soapNsID = r.NameTable.Add("http://schemas.xmlsoap.org/soap/encoding/");
            soap12NsID = r.NameTable.Add("http://www.w3.org/2003/05/soap-encoding");
            schemaID = r.NameTable.Add("schema");
            wsdlNsID = r.NameTable.Add("http://schemas.xmlsoap.org/wsdl/");
            wsdlArrayTypeID = r.NameTable.Add("arrayType");
            nullID = r.NameTable.Add("null");
            nilID = r.NameTable.Add("nil");
            typeID = r.NameTable.Add("type");
            arrayTypeID = r.NameTable.Add("arrayType");
            itemTypeID = r.NameTable.Add("itemType");
            arraySizeID = r.NameTable.Add("arraySize");
            arrayID = r.NameTable.Add("Array");
            urTypeID = r.NameTable.Add("anyType");
            InitIDs();
        }

        #endregion "Constructor"


        #region "Field Definition"

        XmlReader r;
        XmlDocument d;

        bool soap12;
        bool isReturnValue;
        bool decodeName = true;

        string schemaNsID;
        string schemaNs1999ID;
        string schemaNs2000ID;
        string schemaNonXsdTypesNsID;
        string instanceNsID;
        string instanceNs2000ID;
        string instanceNs1999ID;
        string soapNsID;
        string soap12NsID;
        string schemaID;
        string wsdlNsID;
        string wsdlArrayTypeID;
        string nullID;
        string nilID;
        string typeID;
        string arrayTypeID;
        string itemTypeID;
        string arraySizeID;
        string arrayID;
        string urTypeID;
        string stringID;
        string intID;
        string booleanID;
        string shortID;
        string longID;
        string floatID;
        string doubleID;
        string decimalID;
        string dateTimeID;
        string qnameID;
        string dateID;
        string timeID;
        string hexBinaryID;
        string base64BinaryID;
        string base64ID;
        string unsignedByteID;
        string byteID;
        string unsignedShortID;
        string unsignedIntID;
        string unsignedLongID;
        string oldDecimalID;
        string oldTimeInstantID;

        string anyURIID;
        string durationID;
        string ENTITYID;
        string ENTITIESID;
        string gDayID;
        string gMonthID;
        string gMonthDayID;
        string gYearID;
        string gYearMonthID;
        string IDID;
        string IDREFID;
        string IDREFSID;
        string integerID;
        string languageID;
        string NameID;
        string NCNameID;
        string NMTOKENID;
        string NMTOKENSID;
        string negativeIntegerID;
        string nonPositiveIntegerID;
        string nonNegativeIntegerID;
        string normalizedStringID;
        string NOTATIONID;
        string positiveIntegerID;
        string tokenID;

        string charID;
        string guidID;

        static object PrimitiveTypedObject = new object();

        #endregion "Field Definition"


        #region "Property Definition"

        internal XmlReader Reader
        {
            get
            {
                return r;
            }
        }

        internal int ReaderCount
        {
            get
            {
                // XmlSerializationReader implementation is:
                //    return checkDeserializeAdvances ? countingReader.AdvanceCount : 0;
                // and checkDeserializeAdvances is set in the static constrcutor:
                //    XmlSerializerSection configSection = ConfigurationManager.GetSection(ConfigurationStrings.XmlSerializerSectionPath) as XmlSerializerSection;
                //    checkDeserializeAdvances = (configSection == null) ? false : configSection.CheckDeserializeAdvances;
                // When XmlSerializationReader is used in powershell, there is no configuration file defined for it, so 'checkDeserializeAdvances' will actually
                // always be 'false'. Therefore, here we directly return 0 for 'ReaderCount'.
                return 0;
            }
        }

        internal bool DecodeName
        {
            get
            {
                return decodeName;
            }
            set
            {
                decodeName = value;
            }
        }

        protected XmlDocument Document
        {
            get
            {
                if (d == null)
                {
                    d = new XmlDocument(r.NameTable);
                }
                return d;
            }
        }

        #endregion "Property Definition"


        #region "Method Definition"

        internal void InitPrimitiveIDs()
        {
            if (tokenID != null) return;

            object ns = r.NameTable.Add("http://www.w3.org/2001/XMLSchema");
            object ns2 = r.NameTable.Add("http://microsoft.com/wsdl/types/");

            stringID = r.NameTable.Add("string");
            intID = r.NameTable.Add("int");
            booleanID = r.NameTable.Add("boolean");
            shortID = r.NameTable.Add("short");
            longID = r.NameTable.Add("long");
            floatID = r.NameTable.Add("float");
            doubleID = r.NameTable.Add("double");
            decimalID = r.NameTable.Add("decimal");
            dateTimeID = r.NameTable.Add("dateTime");
            qnameID = r.NameTable.Add("QName");
            dateID = r.NameTable.Add("date");
            timeID = r.NameTable.Add("time");
            hexBinaryID = r.NameTable.Add("hexBinary");
            base64BinaryID = r.NameTable.Add("base64Binary");
            unsignedByteID = r.NameTable.Add("unsignedByte");
            byteID = r.NameTable.Add("byte");
            unsignedShortID = r.NameTable.Add("unsignedShort");
            unsignedIntID = r.NameTable.Add("unsignedInt");
            unsignedLongID = r.NameTable.Add("unsignedLong");
            oldDecimalID = r.NameTable.Add("decimal");
            oldTimeInstantID = r.NameTable.Add("timeInstant");
            charID = r.NameTable.Add("char");
            guidID = r.NameTable.Add("guid");
            base64ID = r.NameTable.Add("base64");

            anyURIID = r.NameTable.Add("anyURI");
            durationID = r.NameTable.Add("duration");
            ENTITYID = r.NameTable.Add("ENTITY");
            ENTITIESID = r.NameTable.Add("ENTITIES");
            gDayID = r.NameTable.Add("gDay");
            gMonthID = r.NameTable.Add("gMonth");
            gMonthDayID = r.NameTable.Add("gMonthDay");
            gYearID = r.NameTable.Add("gYear");
            gYearMonthID = r.NameTable.Add("gYearMonth");
            IDID = r.NameTable.Add("ID");
            IDREFID = r.NameTable.Add("IDREF");
            IDREFSID = r.NameTable.Add("IDREFS");
            integerID = r.NameTable.Add("integer");
            languageID = r.NameTable.Add("language");
            NameID = r.NameTable.Add("Name");
            NCNameID = r.NameTable.Add("NCName");
            NMTOKENID = r.NameTable.Add("NMTOKEN");
            NMTOKENSID = r.NameTable.Add("NMTOKENS");
            negativeIntegerID = r.NameTable.Add("negativeInteger");
            nonNegativeIntegerID = r.NameTable.Add("nonNegativeInteger");
            nonPositiveIntegerID = r.NameTable.Add("nonPositiveInteger");
            normalizedStringID = r.NameTable.Add("normalizedString");
            NOTATIONID = r.NameTable.Add("NOTATION");
            positiveIntegerID = r.NameTable.Add("positiveInteger");
            tokenID = r.NameTable.Add("token");
        }

        protected void CheckReaderCount(ref int whileIterations, ref int readerCount)
        {
        }

        private string CurrentTag()
        {
            switch (r.NodeType)
            {
                case XmlNodeType.Element:
                    return "<" + r.LocalName + " xmlns='" + r.NamespaceURI + "'>";
                case XmlNodeType.EndElement:
                    return ">";
                case XmlNodeType.Text:
                    return r.Value;
                case XmlNodeType.CDATA:
                    return "CDATA";
                case XmlNodeType.Comment:
                    return "<--";
                case XmlNodeType.ProcessingInstruction:
                    return "<?";
                default:
                    return "(unknown)";
            }
        }

        protected Exception CreateUnknownNodeException()
        {
            return new InvalidOperationException("XmlUnknownNode: " + CurrentTag());
        }

        protected Exception CreateUnknownTypeException(XmlQualifiedName type)
        {
            return new InvalidOperationException(string.Format(CultureInfo.CurrentCulture, "XmlUnknownType. Name: {0}, Namespace {1}, CurrentTag: {2}", type.Name, type.Namespace, CurrentTag()));
        }

        protected Exception CreateUnknownConstantException(string value, Type enumType)
        {
            return new InvalidOperationException(string.Format(CultureInfo.CurrentCulture, "XmlUnknownConstant. Value: {0}, EnumType: {1}", value, enumType.Name));
        }

        protected Array ShrinkArray(Array a, int length, Type elementType, bool isNullable)
        {
            if (a == null)
            {
                if (isNullable) return null;
                return Array.CreateInstance(elementType, 0);
            }
            if (a.Length == length) return a;
            Array b = Array.CreateInstance(elementType, length);
            Array.Copy(a, b, length);
            return b;
        }

        protected Array EnsureArrayIndex(Array a, int index, Type elementType)
        {
            if (a == null) return Array.CreateInstance(elementType, 32);
            if (index < a.Length) return a;
            Array b = Array.CreateInstance(elementType, a.Length * 2);
            Array.Copy(a, b, index);
            return b;
        }

        protected string CollapseWhitespace(string value)
        {
            if (value == null)
                return null;
            return value.Trim();
        }

        protected bool IsXmlnsAttribute(string name)
        {
            if (!name.StartsWith("xmlns", StringComparison.Ordinal)) return false;
            if (name.Length == 5) return true;
            return name[5] == ':';
        }

        protected void UnknownNode(object o)
        {
            UnknownNode(o, null);
        }

        protected void UnknownNode(object o, string qnames)
        {
            if (r.NodeType == XmlNodeType.None || r.NodeType == XmlNodeType.Whitespace)
            {
                r.Read();
                return;
            }

            if (r.NodeType == XmlNodeType.EndElement)
                return;
            
            if (r.NodeType == XmlNodeType.Attribute)
            {
                return;
            }
            else if (r.NodeType == XmlNodeType.Element)
            {
                r.Skip();
                return;
            }
            else
            {
                UnknownNode(Document.ReadNode(r), o, qnames);
            }
        }

        private void UnknownNode(XmlNode unknownNode, object o, string qnames)
        {
            if (unknownNode == null)
                return;

            // No XmlDeserializationEvents in CoreCLR. The events like 'onUnknownNode', 'onUnknownAttribute' and
            // 'onUnknownElement' are not used in powershell code, so it's safe to not perform extra operations here.
        }

        protected void ReadEndElement()
        {
            while (r.NodeType == XmlNodeType.Whitespace) r.Skip();
            if (r.NodeType == XmlNodeType.None) r.Skip();
            else r.ReadEndElement();
        }

        protected string ReadString(string value, bool trim)
        {
            // This method is used only in Read47_ClassMetadataData and Read35_ClassMetadataData when the current XmlNodeType
            // is one of the following:
            //   XmlNodeType.Text
            //   XmlNodeType.CDATA
            //   XmlNodeType.Whitespace
            //   XmlNodeType.SignificantWhitespace
            // In this case, we use 'ReadContentAsString()' to read the text content at the current position.
            // We cannot use 'ReadElementContentAsString()'. It will fail because the XmlReader is not positioned on an Element start node. 
            string str = r.ReadContentAsString();
            if (str != null && trim)
                str = str.Trim();
            if (value == null || value.Length == 0)
                return str;
            return value + str;
        }

        protected XmlQualifiedName ToXmlQualifiedName(string value)
        {
            return ToXmlQualifiedName(value, DecodeName);
        }

        internal XmlQualifiedName ToXmlQualifiedName(string value, bool decodeName)
        {
            int colon = value == null ? -1 : value.LastIndexOf(':');
            string prefix = colon < 0 ? null : value.Substring(0, colon);
            string localName = value.Substring(colon + 1);

            if (decodeName)
            {
                prefix = XmlConvert.DecodeName(prefix);
                localName = XmlConvert.DecodeName(localName);
            }
            if (prefix == null || prefix.Length == 0)
            {
                return new XmlQualifiedName(r.NameTable.Add(value), r.LookupNamespace(String.Empty));
            }
            else
            {
                string ns = r.LookupNamespace(prefix);
                if (ns == null)
                {
                    // Namespace prefix '{0}' is not defined.
                    throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture, "XmlUndefinedAlias. Prefix: {0}", prefix));
                }
                return new XmlQualifiedName(r.NameTable.Add(localName), ns);
            }
        }

        /// <summary>
        /// In the context of CDXML deserialization, GetXsiType() will
        /// always return null, as all CDXML files are under the namespace
        /// "http://schemas.microsoft.com/cmdlets-over-objects/2009/11",
        /// so the GetAttribute(..) operation here will always return null.
        /// </summary>
        protected XmlQualifiedName GetXsiType()
        {
            string type = r.GetAttribute(typeID, instanceNsID);
            if (type == null)
            {
                type = r.GetAttribute(typeID, instanceNs2000ID);
                if (type == null)
                {
                    type = r.GetAttribute(typeID, instanceNs1999ID);
                    if (type == null)
                        return null;
                }
            }
            return ToXmlQualifiedName(type, false);
        }

        protected bool GetNullAttr()
        {
            string isNull = r.GetAttribute(nilID, instanceNsID);
            if (isNull == null)
                isNull = r.GetAttribute(nullID, instanceNsID);
            if (isNull == null)
            {
                isNull = r.GetAttribute(nullID, instanceNs2000ID);
                if (isNull == null)
                    isNull = r.GetAttribute(nullID, instanceNs1999ID);
            }
            if (isNull == null || !XmlConvert.ToBoolean(isNull)) return false;
            return true;
        }

        protected bool ReadNull()
        {
            if (!GetNullAttr()) return false;
            if (r.IsEmptyElement)
            {
                r.Skip();
                return true;
            }
            r.ReadStartElement();
            int whileIterations = 0;
            int readerCount = ReaderCount;
            while (r.NodeType != XmlNodeType.EndElement)
            {
                UnknownNode(null);
                CheckReaderCount(ref whileIterations, ref readerCount);
            }
            ReadEndElement();
            return true;
        }

        bool IsPrimitiveNamespace(string ns)
        {
            return (object)ns == (object)schemaNsID ||
                   (object)ns == (object)schemaNonXsdTypesNsID ||
                   (object)ns == (object)soapNsID ||
                   (object)ns == (object)soap12NsID ||
                   (object)ns == (object)schemaNs2000ID ||
                   (object)ns == (object)schemaNs1999ID;
        }

        protected object ReadTypedPrimitive(XmlQualifiedName type)
        {
            InitPrimitiveIDs();

            // This method is only used in Read1_Object(bool isNullable, bool checkType).
            // This method is called only when we want to get a value for tag elements that don't take values, such as
            // ValidateNotNull, AllowNull, AllEmptyString, ErrorCode and etc. e.g. <ValidateNotNullOrEmpty />, <ErrorCode />.
            // We don't actually use the value, only check if the value is null, so as to decide whether the tag element
            // is specified in CDXML file.
            if (!IsPrimitiveNamespace(type.Namespace) || (object)type.Name == (object)urTypeID)
                return PrimitiveTypedObject;

            // CDXML files are all under the namespace 'http://schemas.microsoft.com/cmdlets-over-objects/2009/11', so
            // they will never fall into the following namespaces:
            //     schemaNsID, soapNsID, soap12NsID, schemaNs2000ID, schemaNs1999ID, schemaNonXsdTypesNsID
            // 
            // Actually, in the context of CDXML deserialization, GetXsiType() will always return null, so
            // the only possible 'type' passed in this method should be like this:
            //     type.Name = "anyType"; type.Namespace = "http://www.w3.org/2001/XMLSchema"
            // Therefore, execution of this method should always fall in the above IF block.
            throw new InvalidOperationException("ReadTypedPrimitive - code should be unreachable for its usage in CDXML.");
        }

        protected object ReadTypedNull(XmlQualifiedName type)
        {
            InitPrimitiveIDs();

            // This method is only used in Read1_Object(bool isNullable, bool checkType).
            // This method is invoked only if GetXsiType() returns a value that is not null. Actually, in the context of 
            // CDXML deserialization, GetXsiType() will always return null, so this method will never be called in runtime.
            return null;
        }

        #endregion "Method Definition"


        #endregion Copy_From_XmlSerializationReader

        public object Read50_PowerShellMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id1_PowerShellMetadata && (object) Reader.NamespaceURI == (object)id2_Item)) {
                    o = Read39_PowerShellMetadata(false, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:PowerShellMetadata");
            }
            return (object)o;
        }

        public object Read51_ClassMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id3_ClassMetadata && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read36_ClassMetadata(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":ClassMetadata");
            }
            return (object)o;
        }

        public object Read52_ClassMetadataInstanceCmdlets() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id5_ClassMetadataInstanceCmdlets && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read40_ClassMetadataInstanceCmdlets(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":ClassMetadataInstanceCmdlets");
            }
            return (object)o;
        }

        public object Read53_GetCmdletParameters() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id6_GetCmdletParameters && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read19_GetCmdletParameters(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":GetCmdletParameters");
            }
            return (object)o;
        }

        public object Read54_PropertyMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id7_PropertyMetadata && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read15_PropertyMetadata(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":PropertyMetadata");
            }
            return (object)o;
        }

        public object Read55_TypeMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id8_TypeMetadata && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read2_TypeMetadata(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":TypeMetadata");
            }
            return (object)o;
        }

        public object Read56_Association() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id9_Association && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read17_Association(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":Association");
            }
            return (object)o;
        }

        public object Read57_AssociationAssociatedInstance() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id10_AssociationAssociatedInstance && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read41_AssociationAssociatedInstance(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":AssociationAssociatedInstance");
            }
            return (object)o;
        }

        public object Read58_CmdletParameterMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id11_CmdletParameterMetadata && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read10_CmdletParameterMetadata(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":CmdletParameterMetadata");
            }
            return (object)o;
        }

        public object Read59_Item() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id12_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read11_Item(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":CmdletParameterMetadataForGetCmdletParameter");
            }
            return (object)o;
        }

        public object Read60_Item() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id13_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read12_Item(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":CmdletParameterMetadataForGetCmdletFilteringParameter");
            }
            return (object)o;
        }

        public object Read61_Item() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id14_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read42_Item(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":CmdletParameterMetadataValidateCount");
            }
            return (object)o;
        }

        public object Read62_Item() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id15_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read43_Item(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":CmdletParameterMetadataValidateLength");
            }
            return (object)o;
        }

        public object Read63_Item() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id16_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read44_Item(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":CmdletParameterMetadataValidateRange");
            }
            return (object)o;
        }

        public object Read64_ObsoleteAttributeMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id17_ObsoleteAttributeMetadata && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read7_ObsoleteAttributeMetadata(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":ObsoleteAttributeMetadata");
            }
            return (object)o;
        }

        public object Read65_Item() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id18_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read9_Item(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":CmdletParameterMetadataForInstanceMethodParameter");
            }
            return (object)o;
        }

        public object Read66_Item() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id19_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read8_Item(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":CmdletParameterMetadataForStaticMethodParameter");
            }
            return (object)o;
        }

        public object Read67_QueryOption() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id20_QueryOption && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read18_QueryOption(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":QueryOption");
            }
            return (object)o;
        }

        public object Read68_GetCmdletMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id21_GetCmdletMetadata && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read22_GetCmdletMetadata(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":GetCmdletMetadata");
            }
            return (object)o;
        }

        public object Read69_CommonCmdletMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id22_CommonCmdletMetadata && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read21_CommonCmdletMetadata(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":CommonCmdletMetadata");
            }
            return (object)o;
        }

        public object Read70_ConfirmImpact() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id23_ConfirmImpact && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    {
                        o = Read20_ConfirmImpact(Reader.ReadElementContentAsString());
                    }
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":ConfirmImpact");
            }
            return (object)o;
        }

        public object Read71_StaticCmdletMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id24_StaticCmdletMetadata && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read34_StaticCmdletMetadata(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":StaticCmdletMetadata");
            }
            return (object)o;
        }

        public object Read72_Item() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id25_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read45_Item(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":StaticCmdletMetadataCmdletMetadata");
            }
            return (object)o;
        }

        public object Read73_CommonMethodMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id26_CommonMethodMetadata && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read29_CommonMethodMetadata(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":CommonMethodMetadata");
            }
            return (object)o;
        }

        public object Read74_StaticMethodMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id27_StaticMethodMetadata && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read28_StaticMethodMetadata(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":StaticMethodMetadata");
            }
            return (object)o;
        }

        public object Read75_CommonMethodParameterMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id28_CommonMethodParameterMetadata && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read26_CommonMethodParameterMetadata(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":CommonMethodParameterMetadata");
            }
            return (object)o;
        }

        public object Read76_StaticMethodParameterMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id29_StaticMethodParameterMetadata && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read27_StaticMethodParameterMetadata(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":StaticMethodParameterMetadata");
            }
            return (object)o;
        }

        public object Read77_CmdletOutputMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id30_CmdletOutputMetadata && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read23_CmdletOutputMetadata(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":CmdletOutputMetadata");
            }
            return (object)o;
        }

        public object Read78_Item() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id31_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read25_Item(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":InstanceMethodParameterMetadata");
            }
            return (object)o;
        }

        public object Read79_Item() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id32_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read46_Item(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":CommonMethodMetadataReturnValue");
            }
            return (object)o;
        }

        public object Read80_InstanceMethodMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id33_InstanceMethodMetadata && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read30_InstanceMethodMetadata(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":InstanceMethodMetadata");
            }
            return (object)o;
        }

        public object Read81_InstanceCmdletMetadata() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id34_InstanceCmdletMetadata && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read31_InstanceCmdletMetadata(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":InstanceCmdletMetadata");
            }
            return (object)o;
        }

        public object Read82_PropertyQuery() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id35_PropertyQuery && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read14_PropertyQuery(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":PropertyQuery");
            }
            return (object)o;
        }

        public object Read83_WildcardablePropertyQuery() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id36_WildcardablePropertyQuery && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read13_WildcardablePropertyQuery(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":WildcardablePropertyQuery");
            }
            return (object)o;
        }

        public object Read84_ItemsChoiceType() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id37_ItemsChoiceType && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    {
                        o = Read3_ItemsChoiceType(Reader.ReadElementContentAsString());
                    }
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":ItemsChoiceType");
            }
            return (object)o;
        }

        public object Read85_ClassMetadataData() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id38_ClassMetadataData && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read47_ClassMetadataData(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":ClassMetadataData");
            }
            return (object)o;
        }

        public object Read86_EnumMetadataEnum() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id39_EnumMetadataEnum && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read48_EnumMetadataEnum(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":EnumMetadataEnum");
            }
            return (object)o;
        }

        public object Read87_EnumMetadataEnumValue() {
            object o = null;
            Reader.MoveToContent();
            if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                if (((object) Reader.LocalName == (object)id40_EnumMetadataEnumValue && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o = Read49_EnumMetadataEnumValue(true, true);
                }
                else {
                    throw CreateUnknownNodeException();
                }
            }
            else {
                UnknownNode(null, @":EnumMetadataEnumValue");
            }
            return (object)o;
        }

        global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue Read49_EnumMetadataEnumValue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id40_EnumMetadataEnumValue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue o;
            o = new global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id41_Name && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Name = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id42_Value && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Value = CollapseWhitespace(Reader.Value);
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":Name, :Value");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations0 = 0;
            int readerCount0 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations0, ref readerCount0);
            }
            ReadEndElement();
            return o;
        }

        global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum Read48_EnumMetadataEnum(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id39_EnumMetadataEnum && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum o;
            o = new global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum();
            global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue[] a_0 = null;
            int ca_0 = 0;
            bool[] paramsRead = new bool[4];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[1] && ((object) Reader.LocalName == (object)id43_EnumName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@EnumName = Reader.Value;
                    paramsRead[1] = true;
                }
                else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id44_UnderlyingType && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@UnderlyingType = Reader.Value;
                    paramsRead[2] = true;
                }
                else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id45_BitwiseFlags && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@BitwiseFlags = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                    o.@BitwiseFlagsSpecified = true;
                    paramsRead[3] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":EnumName, :UnderlyingType, :BitwiseFlags");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@Value = (global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue[])ShrinkArray(a_0, ca_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations1 = 0;
            int readerCount1 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (((object) Reader.LocalName == (object)id42_Value && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        a_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue[])EnsureArrayIndex(a_0, ca_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue));a_0[ca_0++] = Read37_EnumMetadataEnumValue(false, true);
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Value");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Value");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations1, ref readerCount1);
            }
            o.@Value = (global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue[])ShrinkArray(a_0, ca_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue), true);
            ReadEndElement();
            return o;
        }

        global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue Read37_EnumMetadataEnumValue(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue o;
            o = new global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id41_Name && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Name = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id42_Value && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Value = CollapseWhitespace(Reader.Value);
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":Name, :Value");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations2 = 0;
            int readerCount2 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations2, ref readerCount2);
            }
            ReadEndElement();
            return o;
        }

        global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData Read47_ClassMetadataData(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id38_ClassMetadataData && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData o;
            o = new global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id41_Name && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Name = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":Name");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations3 = 0;
            int readerCount3 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                string tmp = null;
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else if (Reader.NodeType == System.Xml.XmlNodeType.Text || 
                Reader.NodeType == System.Xml.XmlNodeType.CDATA || 
                Reader.NodeType == System.Xml.XmlNodeType.Whitespace || 
                Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace) {
                    tmp = ReadString(tmp, false);
                    o.@Value = tmp;
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations3, ref readerCount3);
            }
            ReadEndElement();
            return o;
        }

        global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType Read3_ItemsChoiceType(string s) {
            switch (s) {
                case @"ExcludeQuery": return global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType.@ExcludeQuery;
                case @"MaxValueQuery": return global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType.@MaxValueQuery;
                case @"MinValueQuery": return global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType.@MinValueQuery;
                case @"RegularQuery": return global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType.@RegularQuery;
                default: throw CreateUnknownConstantException(s, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType));
            }
        }

        global::Microsoft.PowerShell.Cmdletization.Xml.WildcardablePropertyQuery Read13_WildcardablePropertyQuery(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id36_WildcardablePropertyQuery && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::Microsoft.PowerShell.Cmdletization.Xml.WildcardablePropertyQuery o;
            o = new global::Microsoft.PowerShell.Cmdletization.Xml.WildcardablePropertyQuery();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[1] && ((object) Reader.LocalName == (object)id46_AllowGlobbing && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@AllowGlobbing = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                    o.@AllowGlobbingSpecified = true;
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":AllowGlobbing");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations4 = 0;
            int readerCount4 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id11_CmdletParameterMetadata && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@CmdletParameterMetadata = Read12_Item(false, true);
                        paramsRead[0] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletParameterMetadata");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletParameterMetadata");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations4, ref readerCount4);
            }
            ReadEndElement();
            return o;
        }

        global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataForGetCmdletFilteringParameter Read12_Item(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id13_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataForGetCmdletFilteringParameter o;
            o = new global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataForGetCmdletFilteringParameter();
            global::System.String[] a_8 = null;
            int ca_8 = 0;
            global::System.String[] a_11 = null;
            int ca_11 = 0;
            global::System.String[] a_16 = null;
            int ca_16 = 0;
            bool[] paramsRead = new bool[18];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[10] && ((object) Reader.LocalName == (object)id47_IsMandatory && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@IsMandatory = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                    o.@IsMandatorySpecified = true;
                    paramsRead[10] = true;
                }
                else if (((object) Reader.LocalName == (object)id48_Aliases && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    string listValues = Reader.Value;
                    string[] vals = listValues.Split(null);
                    for (int i = 0; i < vals.Length; i++) {
                        a_11 = (global::System.String[])EnsureArrayIndex(a_11, ca_11, typeof(global::System.String));a_11[ca_11++] = vals[i];
                    }
                }
                else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id49_PSName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@PSName = Reader.Value;
                    paramsRead[12] = true;
                }
                else if (!paramsRead[13] && ((object) Reader.LocalName == (object)id50_Position && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Position = CollapseWhitespace(Reader.Value);
                    paramsRead[13] = true;
                }
                else if (!paramsRead[14] && ((object) Reader.LocalName == (object)id51_ValueFromPipeline && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@ValueFromPipeline = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                    o.@ValueFromPipelineSpecified = true;
                    paramsRead[14] = true;
                }
                else if (!paramsRead[15] && ((object) Reader.LocalName == (object)id52_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@ValueFromPipelineByPropertyName = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                    o.@ValueFromPipelineByPropertyNameSpecified = true;
                    paramsRead[15] = true;
                }
                else if (((object) Reader.LocalName == (object)id53_CmdletParameterSets && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    string listValues = Reader.Value;
                    string[] vals = listValues.Split(null);
                    for (int i = 0; i < vals.Length; i++) {
                        a_16 = (global::System.String[])EnsureArrayIndex(a_16, ca_16, typeof(global::System.String));a_16[ca_16++] = vals[i];
                    }
                }
                else if (!paramsRead[17] && ((object) Reader.LocalName == (object)id54_ErrorOnNoMatch && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@ErrorOnNoMatch = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                    o.@ErrorOnNoMatchSpecified = true;
                    paramsRead[17] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":IsMandatory, :Aliases, :PSName, :Position, :ValueFromPipeline, :ValueFromPipelineByPropertyName, :CmdletParameterSets, :ErrorOnNoMatch");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                o.@Aliases = (global::System.String[])ShrinkArray(a_11, ca_11, typeof(global::System.String), true);
                o.@CmdletParameterSets = (global::System.String[])ShrinkArray(a_16, ca_16, typeof(global::System.String), true);
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations5 = 0;
            int readerCount5 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id55_AllowEmptyCollection && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@AllowEmptyCollection = Read1_Object(false, true);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id56_AllowEmptyString && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@AllowEmptyString = Read1_Object(false, true);
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id57_AllowNull && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@AllowNull = Read1_Object(false, true);
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id58_ValidateNotNull && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@ValidateNotNull = Read1_Object(false, true);
                        paramsRead[3] = true;
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id59_ValidateNotNullOrEmpty && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@ValidateNotNullOrEmpty = Read1_Object(false, true);
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id60_ValidateCount && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@ValidateCount = Read4_Item(false, true);
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id61_ValidateLength && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@ValidateLength = Read5_Item(false, true);
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id62_ValidateRange && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@ValidateRange = Read6_Item(false, true);
                        paramsRead[7] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id63_ValidateSet && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        if (!ReadNull()) {
                            global::System.String[] a_8_0 = null;
                            int ca_8_0 = 0;
                            if ((Reader.IsEmptyElement)) {
                                Reader.Skip();
                            }
                            else {
                                Reader.ReadStartElement();
                                Reader.MoveToContent();
                                int whileIterations6 = 0;
                                int readerCount6 = ReaderCount;
                                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                        if (((object) Reader.LocalName == (object)id64_AllowedValue && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                            {
                                                a_8_0 = (global::System.String[])EnsureArrayIndex(a_8_0, ca_8_0, typeof(global::System.String)); a_8_0[ca_8_0++] = Reader.ReadElementContentAsString();
                                            }
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowedValue");
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowedValue");
                                    }
                                    Reader.MoveToContent();
                                    CheckReaderCount(ref whileIterations6, ref readerCount6);
                                }
                            ReadEndElement();
                            }
                            o.@ValidateSet = (global::System.String[])ShrinkArray(a_8_0, ca_8_0, typeof(global::System.String), false);
                        }
                    }
                    else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id65_Obsolete && (object) Reader.NamespaceURI == (object)id2_Item)) {
                        o.@Obsolete = Read7_ObsoleteAttributeMetadata(false, true);
                        paramsRead[9] = true;
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyCollection, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyString, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNullOrEmpty, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateCount, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateLength, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateRange, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateSet, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                    }
                }
                else {
                    UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyCollection, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyString, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNullOrEmpty, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateCount, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateLength, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateRange, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateSet, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations5, ref readerCount5);
            }
            o.@Aliases = (global::System.String[])ShrinkArray(a_11, ca_11, typeof(global::System.String), true);
            o.@CmdletParameterSets = (global::System.String[])ShrinkArray(a_16, ca_16, typeof(global::System.String), true);
            ReadEndElement();
            return o;
        }

        global::Microsoft.PowerShell.Cmdletization.Xml.ObsoleteAttributeMetadata Read7_ObsoleteAttributeMetadata(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id17_ObsoleteAttributeMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::Microsoft.PowerShell.Cmdletization.Xml.ObsoleteAttributeMetadata o;
            o = new global::Microsoft.PowerShell.Cmdletization.Xml.ObsoleteAttributeMetadata();
            bool[] paramsRead = new bool[1];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id66_Message && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Message = Reader.Value;
                    paramsRead[0] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":Message");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations7 = 0;
            int readerCount7 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations7, ref readerCount7);
            }
            ReadEndElement();
            return o;
        }

        global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateRange Read6_Item(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateRange o;
            o = new global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateRange();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id67_Min && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Min = CollapseWhitespace(Reader.Value);
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id68_Max && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Max = CollapseWhitespace(Reader.Value);
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":Min, :Max");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations8 = 0;
            int readerCount8 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations8, ref readerCount8);
            }
            ReadEndElement();
            return o;
        }

        global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateLength Read5_Item(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateLength o;
            o = new global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateLength();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id67_Min && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Min = CollapseWhitespace(Reader.Value);
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id68_Max && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Max = CollapseWhitespace(Reader.Value);
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":Min, :Max");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations9 = 0;
            int readerCount9 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations9, ref readerCount9);
            }
            ReadEndElement();
            return o;
        }

        global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateCount Read4_Item(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
            if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
            }
            else
                throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
            }
            if (isNull) return null;
            global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateCount o;
            o = new global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateCount();
            bool[] paramsRead = new bool[2];
            while (Reader.MoveToNextAttribute()) {
                if (!paramsRead[0] && ((object) Reader.LocalName == (object)id67_Min && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Min = CollapseWhitespace(Reader.Value);
                    paramsRead[0] = true;
                }
                else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id68_Max && (object) Reader.NamespaceURI == (object)id4_Item)) {
                    o.@Max = CollapseWhitespace(Reader.Value);
                    paramsRead[1] = true;
                }
                else if (!IsXmlnsAttribute(Reader.Name)) {
                    UnknownNode((object)o, @":Min, :Max");
                }
            }
            Reader.MoveToElement();
            if (Reader.IsEmptyElement) {
                Reader.Skip();
                return o;
            }
            Reader.ReadStartElement();
            Reader.MoveToContent();
            int whileIterations10 = 0;
            int readerCount10 = ReaderCount;
            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                    UnknownNode((object)o, @"");
                }
                else {
                    UnknownNode((object)o, @"");
                }
                Reader.MoveToContent();
                CheckReaderCount(ref whileIterations10, ref readerCount10);
            }
            ReadEndElement();
            return o;
        }

        global::System.Object Read1_Object(bool isNullable, bool checkType) {
            System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
            bool isNull = false;
            if (isNullable) isNull = ReadNull();
            if (checkType) {
                if (isNull) {
                    if (xsiType != null) return (global::System.Object)ReadTypedNull(xsiType);
                    else return null;
                }
                if (xsiType == null) {
                    return ReadTypedPrimitive(new System.Xml.XmlQualifiedName("anyType", "http://www.w3.org/2001/XMLSchema"));
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id40_EnumMetadataEnumValue && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read49_EnumMetadataEnumValue(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id39_EnumMetadataEnum && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read48_EnumMetadataEnum(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id38_ClassMetadataData && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read47_ClassMetadataData(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id32_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read46_Item(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id16_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read44_Item(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id15_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read43_Item(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id14_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read42_Item(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id10_AssociationAssociatedInstance && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read41_AssociationAssociatedInstance(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id5_ClassMetadataInstanceCmdlets && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read40_ClassMetadataInstanceCmdlets(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_ClassMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read36_ClassMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id24_StaticCmdletMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read34_StaticCmdletMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id34_InstanceCmdletMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read31_InstanceCmdletMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id28_CommonMethodParameterMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read26_CommonMethodParameterMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id29_StaticMethodParameterMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read27_StaticMethodParameterMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id31_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read25_Item(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id26_CommonMethodMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read29_CommonMethodMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id33_InstanceMethodMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read30_InstanceMethodMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id27_StaticMethodMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read28_StaticMethodMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id30_CmdletOutputMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read23_CmdletOutputMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id21_GetCmdletMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read22_GetCmdletMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id22_CommonCmdletMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read21_CommonCmdletMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id25_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read45_Item(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id6_GetCmdletParameters && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read19_GetCmdletParameters(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id20_QueryOption && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read18_QueryOption(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id9_Association && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read17_Association(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id7_PropertyMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read15_PropertyMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id35_PropertyQuery && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read14_PropertyQuery(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id36_WildcardablePropertyQuery && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read13_WildcardablePropertyQuery(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id11_CmdletParameterMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read10_CmdletParameterMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id12_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read11_Item(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id13_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read12_Item(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id18_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read9_Item(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id19_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read8_Item(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id17_ObsoleteAttributeMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read7_ObsoleteAttributeMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id8_TypeMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read2_TypeMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id37_ItemsChoiceType && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                    Reader.ReadStartElement();
                    object e = Read3_ItemsChoiceType(CollapseWhitespace(Reader.ReadElementContentAsString()));
                    ReadEndElement();
                    return e;
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id69_ArrayOfString && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                    global::System.String[] a = null;
                    if (!ReadNull()) {
                        global::System.String[] z_0_0 = null;
                        int cz_0_0 = 0;
                        if ((Reader.IsEmptyElement)) {
                            Reader.Skip();
                        }
                        else {
                            Reader.ReadStartElement();
                            Reader.MoveToContent();
                            int whileIterations11 = 0;
                            int readerCount11 = ReaderCount;
                            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                    if (((object) Reader.LocalName == (object)id64_AllowedValue && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                        {
                                            z_0_0 = (global::System.String[])EnsureArrayIndex(z_0_0, cz_0_0, typeof(global::System.String)); z_0_0[cz_0_0++] = Reader.ReadElementContentAsString();
                                        }
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowedValue");
                                    }
                                }
                                else {
                                    UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowedValue");
                                }
                                Reader.MoveToContent();
                                CheckReaderCount(ref whileIterations11, ref readerCount11);
                            }
                        ReadEndElement();
                        }
                        a = (global::System.String[])ShrinkArray(z_0_0, cz_0_0, typeof(global::System.String), false);
                    }
                    return a;
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id70_ArrayOfPropertyMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                    global::Microsoft.PowerShell.Cmdletization.Xml.PropertyMetadata[] a = null;
                    if (!ReadNull()) {
                        global::Microsoft.PowerShell.Cmdletization.Xml.PropertyMetadata[] z_0_0 = null;
                        int cz_0_0 = 0;
                        if ((Reader.IsEmptyElement)) {
                            Reader.Skip();
                        }
                        else {
                            Reader.ReadStartElement();
                            Reader.MoveToContent();
                            int whileIterations12 = 0;
                            int readerCount12 = ReaderCount;
                            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                    if (((object) Reader.LocalName == (object)id71_Property && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                        z_0_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.PropertyMetadata[])EnsureArrayIndex(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.PropertyMetadata));z_0_0[cz_0_0++] = Read15_PropertyMetadata(false, true);
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Property");
                                    }
                                }
                                else {
                                    UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Property");
                                }
                                Reader.MoveToContent();
                                CheckReaderCount(ref whileIterations12, ref readerCount12);
                            }
                        ReadEndElement();
                        }
                        a = (global::Microsoft.PowerShell.Cmdletization.Xml.PropertyMetadata[])ShrinkArray(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.PropertyMetadata), false);
                    }
                    return a;
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id72_ArrayOfAssociation && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                    global::Microsoft.PowerShell.Cmdletization.Xml.Association[] a = null;
                    if (!ReadNull()) {
                        global::Microsoft.PowerShell.Cmdletization.Xml.Association[] z_0_0 = null;
                        int cz_0_0 = 0;
                        if ((Reader.IsEmptyElement)) {
                            Reader.Skip();
                        }
                        else {
                            Reader.ReadStartElement();
                            Reader.MoveToContent();
                            int whileIterations13 = 0;
                            int readerCount13 = ReaderCount;
                            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                    if (((object) Reader.LocalName == (object)id9_Association && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                        z_0_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.Association[])EnsureArrayIndex(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.Association));z_0_0[cz_0_0++] = Read17_Association(false, true);
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Association");
                                    }
                                }
                                else {
                                    UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Association");
                                }
                                Reader.MoveToContent();
                                CheckReaderCount(ref whileIterations13, ref readerCount13);
                            }
                        ReadEndElement();
                        }
                        a = (global::Microsoft.PowerShell.Cmdletization.Xml.Association[])ShrinkArray(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.Association), false);
                    }
                    return a;
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id73_ArrayOfQueryOption && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                    global::Microsoft.PowerShell.Cmdletization.Xml.QueryOption[] a = null;
                    if (!ReadNull()) {
                        global::Microsoft.PowerShell.Cmdletization.Xml.QueryOption[] z_0_0 = null;
                        int cz_0_0 = 0;
                        if ((Reader.IsEmptyElement)) {
                            Reader.Skip();
                        }
                        else {
                            Reader.ReadStartElement();
                            Reader.MoveToContent();
                            int whileIterations14 = 0;
                            int readerCount14 = ReaderCount;
                            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                    if (((object) Reader.LocalName == (object)id74_Option && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                        z_0_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.QueryOption[])EnsureArrayIndex(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.QueryOption));z_0_0[cz_0_0++] = Read18_QueryOption(false, true);
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Option");
                                    }
                                }
                                else {
                                    UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Option");
                                }
                                Reader.MoveToContent();
                                CheckReaderCount(ref whileIterations14, ref readerCount14);
                            }
                        ReadEndElement();
                        }
                        a = (global::Microsoft.PowerShell.Cmdletization.Xml.QueryOption[])ShrinkArray(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.QueryOption), false);
                    }
                    return a;
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id23_ConfirmImpact && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                    Reader.ReadStartElement();
                    object e = Read20_ConfirmImpact(CollapseWhitespace(Reader.ReadElementContentAsString()));
                    ReadEndElement();
                    return e;
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id75_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                    global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodParameterMetadata[] a = null;
                    if (!ReadNull()) {
                        global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodParameterMetadata[] z_0_0 = null;
                        int cz_0_0 = 0;
                        if ((Reader.IsEmptyElement)) {
                            Reader.Skip();
                        }
                        else {
                            Reader.ReadStartElement();
                            Reader.MoveToContent();
                            int whileIterations15 = 0;
                            int readerCount15 = ReaderCount;
                            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                    if (((object) Reader.LocalName == (object)id76_Parameter && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                        z_0_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodParameterMetadata[])EnsureArrayIndex(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodParameterMetadata));z_0_0[cz_0_0++] = Read27_StaticMethodParameterMetadata(false, true);
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Parameter");
                                    }
                                }
                                else {
                                    UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Parameter");
                                }
                                Reader.MoveToContent();
                                CheckReaderCount(ref whileIterations15, ref readerCount15);
                            }
                        ReadEndElement();
                        }
                        a = (global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodParameterMetadata[])ShrinkArray(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodParameterMetadata), false);
                    }
                    return a;
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id77_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                    global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodParameterMetadata[] a = null;
                    if (!ReadNull()) {
                        global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodParameterMetadata[] z_0_0 = null;
                        int cz_0_0 = 0;
                        if ((Reader.IsEmptyElement)) {
                            Reader.Skip();
                        }
                        else {
                            Reader.ReadStartElement();
                            Reader.MoveToContent();
                            int whileIterations16 = 0;
                            int readerCount16 = ReaderCount;
                            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                    if (((object) Reader.LocalName == (object)id76_Parameter && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                        z_0_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodParameterMetadata[])EnsureArrayIndex(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodParameterMetadata));z_0_0[cz_0_0++] = Read25_Item(false, true);
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Parameter");
                                    }
                                }
                                else {
                                    UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Parameter");
                                }
                                Reader.MoveToContent();
                                CheckReaderCount(ref whileIterations16, ref readerCount16);
                            }
                        ReadEndElement();
                        }
                        a = (global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodParameterMetadata[])ShrinkArray(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodParameterMetadata), false);
                    }
                    return a;
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id78_ArrayOfStaticCmdletMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                    global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadata[] a = null;
                    if (!ReadNull()) {
                        global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadata[] z_0_0 = null;
                        int cz_0_0 = 0;
                        if ((Reader.IsEmptyElement)) {
                            Reader.Skip();
                        }
                        else {
                            Reader.ReadStartElement();
                            Reader.MoveToContent();
                            int whileIterations17 = 0;
                            int readerCount17 = ReaderCount;
                            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                    if (((object) Reader.LocalName == (object)id79_Cmdlet && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                        z_0_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadata[])EnsureArrayIndex(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadata));z_0_0[cz_0_0++] = Read34_StaticCmdletMetadata(false, true);
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Cmdlet");
                                    }
                                }
                                else {
                                    UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Cmdlet");
                                }
                                Reader.MoveToContent();
                                CheckReaderCount(ref whileIterations17, ref readerCount17);
                            }
                        ReadEndElement();
                        }
                        a = (global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadata[])ShrinkArray(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadata), false);
                    }
                    return a;
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id80_ArrayOfClassMetadataData && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                    global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData[] a = null;
                    if (!ReadNull()) {
                        global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData[] z_0_0 = null;
                        int cz_0_0 = 0;
                        if ((Reader.IsEmptyElement)) {
                            Reader.Skip();
                        }
                        else {
                            Reader.ReadStartElement();
                            Reader.MoveToContent();
                            int whileIterations18 = 0;
                            int readerCount18 = ReaderCount;
                            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                    if (((object) Reader.LocalName == (object)id81_Data && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                        z_0_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData[])EnsureArrayIndex(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData));z_0_0[cz_0_0++] = Read35_ClassMetadataData(false, true);
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Data");
                                    }
                                }
                                else {
                                    UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Data");
                                }
                                Reader.MoveToContent();
                                CheckReaderCount(ref whileIterations18, ref readerCount18);
                            }
                        ReadEndElement();
                        }
                        a = (global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData[])ShrinkArray(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData), false);
                    }
                    return a;
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id82_ArrayOfEnumMetadataEnum && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                    global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum[] a = null;
                    if (!ReadNull()) {
                        global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum[] z_0_0 = null;
                        int cz_0_0 = 0;
                        if ((Reader.IsEmptyElement)) {
                            Reader.Skip();
                        }
                        else {
                            Reader.ReadStartElement();
                            Reader.MoveToContent();
                            int whileIterations19 = 0;
                            int readerCount19 = ReaderCount;
                            while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                    if (((object) Reader.LocalName == (object)id83_Enum && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                        z_0_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum[])EnsureArrayIndex(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum));z_0_0[cz_0_0++] = Read38_EnumMetadataEnum(false, true);
                                    }
                                    else {
                                        UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Enum");
                                    }
                                }
                                else {
                                    UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Enum");
                                }
                                Reader.MoveToContent();
                                CheckReaderCount(ref whileIterations19, ref readerCount19);
                            }
                        ReadEndElement();
                        }
                        a = (global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum[])ShrinkArray(z_0_0, cz_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum), false);
                    }
                    return a;
                }
                else
                    return ReadTypedPrimitive((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::System.Object o;
                o = new global::System.Object();
                bool[] paramsRead = new bool[0];
                while (Reader.MoveToNextAttribute()) {
                    if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o);
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations20 = 0;
                int readerCount20 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        UnknownNode((object)o, @"");
                    }
                    else {
                        UnknownNode((object)o, @"");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations20, ref readerCount20);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum Read38_EnumMetadataEnum(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum();
                global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue[] a_0 = null;
                int ca_0 = 0;
                bool[] paramsRead = new bool[4];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[1] && ((object) Reader.LocalName == (object)id43_EnumName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@EnumName = Reader.Value;
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id44_UnderlyingType && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@UnderlyingType = Reader.Value;
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id45_BitwiseFlags && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@BitwiseFlags = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                        o.@BitwiseFlagsSpecified = true;
                        paramsRead[3] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":EnumName, :UnderlyingType, :BitwiseFlags");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    o.@Value = (global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue[])ShrinkArray(a_0, ca_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue), true);
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations21 = 0;
                int readerCount21 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (((object) Reader.LocalName == (object)id42_Value && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            a_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue[])EnsureArrayIndex(a_0, ca_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue));a_0[ca_0++] = Read37_EnumMetadataEnumValue(false, true);
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Value");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Value");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations21, ref readerCount21);
                }
                o.@Value = (global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue[])ShrinkArray(a_0, ca_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnumValue), true);
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData Read35_ClassMetadataData(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData();
                bool[] paramsRead = new bool[2];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id41_Name && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Name = Reader.Value;
                        paramsRead[0] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":Name");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations22 = 0;
                int readerCount22 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    string tmp = null;
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        UnknownNode((object)o, @"");
                    }
                    else if (Reader.NodeType == System.Xml.XmlNodeType.Text || 
                    Reader.NodeType == System.Xml.XmlNodeType.CDATA || 
                    Reader.NodeType == System.Xml.XmlNodeType.Whitespace || 
                    Reader.NodeType == System.Xml.XmlNodeType.SignificantWhitespace) {
                        tmp = ReadString(tmp, false);
                        o.@Value = tmp;
                    }
                    else {
                        UnknownNode((object)o, @"");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations22, ref readerCount22);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadata Read34_StaticCmdletMetadata(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id24_StaticCmdletMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadata();
                global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodMetadata[] a_1 = null;
                int ca_1 = 0;
                bool[] paramsRead = new bool[2];
                while (Reader.MoveToNextAttribute()) {
                    if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o);
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    o.@Method = (global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodMetadata[])ShrinkArray(a_1, ca_1, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodMetadata), true);
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations23 = 0;
                int readerCount23 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id84_CmdletMetadata && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@CmdletMetadata = Read33_Item(false, true);
                            paramsRead[0] = true;
                        }
                        else if (((object) Reader.LocalName == (object)id85_Method && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            a_1 = (global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodMetadata[])EnsureArrayIndex(a_1, ca_1, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodMetadata));a_1[ca_1++] = Read28_StaticMethodMetadata(false, true);
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletMetadata, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Method");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletMetadata, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Method");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations23, ref readerCount23);
                }
                o.@Method = (global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodMetadata[])ShrinkArray(a_1, ca_1, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodMetadata), true);
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodMetadata Read28_StaticMethodMetadata(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id27_StaticMethodMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodMetadata();
                global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodParameterMetadata[] a_2 = null;
                int ca_2 = 0;
                bool[] paramsRead = new bool[4];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[1] && ((object) Reader.LocalName == (object)id86_MethodName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@MethodName = Reader.Value;
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id87_CmdletParameterSet && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@CmdletParameterSet = Reader.Value;
                        paramsRead[3] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":MethodName, :CmdletParameterSet");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations24 = 0;
                int readerCount24 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id88_ReturnValue && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ReturnValue = Read24_Item(false, true);
                            paramsRead[0] = true;
                        }
                        else if (((object) Reader.LocalName == (object)id89_Parameters && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            if (!ReadNull()) {
                                global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodParameterMetadata[] a_2_0 = null;
                                int ca_2_0 = 0;
                                if ((Reader.IsEmptyElement)) {
                                    Reader.Skip();
                                }
                                else {
                                    Reader.ReadStartElement();
                                    Reader.MoveToContent();
                                    int whileIterations25 = 0;
                                    int readerCount25 = ReaderCount;
                                    while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                        if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                            if (((object) Reader.LocalName == (object)id76_Parameter && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                                a_2_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodParameterMetadata[])EnsureArrayIndex(a_2_0, ca_2_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodParameterMetadata));a_2_0[ca_2_0++] = Read27_StaticMethodParameterMetadata(false, true);
                                            }
                                            else {
                                                UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Parameter");
                                            }
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Parameter");
                                        }
                                        Reader.MoveToContent();
                                        CheckReaderCount(ref whileIterations25, ref readerCount25);
                                    }
                                ReadEndElement();
                                }
                                o.@Parameters = (global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodParameterMetadata[])ShrinkArray(a_2_0, ca_2_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodParameterMetadata), false);
                            }
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ReturnValue, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Parameters");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ReturnValue, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Parameters");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations24, ref readerCount24);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodParameterMetadata Read27_StaticMethodParameterMetadata(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id29_StaticMethodParameterMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodParameterMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.StaticMethodParameterMetadata();
                bool[] paramsRead = new bool[5];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[1] && ((object) Reader.LocalName == (object)id90_ParameterName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@ParameterName = Reader.Value;
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id91_DefaultValue && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@DefaultValue = Reader.Value;
                        paramsRead[2] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":ParameterName, :DefaultValue");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations26 = 0;
                int readerCount26 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id92_Type && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Type = Read2_TypeMetadata(false, true);
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id11_CmdletParameterMetadata && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@CmdletParameterMetadata = Read8_Item(false, true);
                            paramsRead[3] = true;
                        }
                        else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id30_CmdletOutputMetadata && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@CmdletOutputMetadata = Read23_CmdletOutputMetadata(false, true);
                            paramsRead[4] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletParameterMetadata, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletOutputMetadata");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletParameterMetadata, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletOutputMetadata");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations26, ref readerCount26);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.CmdletOutputMetadata Read23_CmdletOutputMetadata(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id30_CmdletOutputMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.CmdletOutputMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.CmdletOutputMetadata();
                bool[] paramsRead = new bool[2];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[1] && ((object) Reader.LocalName == (object)id49_PSName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@PSName = Reader.Value;
                        paramsRead[1] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":PSName");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations27 = 0;
                int readerCount27 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id93_ErrorCode && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ErrorCode = Read1_Object(false, true);
                            paramsRead[0] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ErrorCode");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ErrorCode");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations27, ref readerCount27);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataForStaticMethodParameter Read8_Item(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id19_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataForStaticMethodParameter o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataForStaticMethodParameter();
                global::System.String[] a_8 = null;
                int ca_8 = 0;
                global::System.String[] a_11 = null;
                int ca_11 = 0;
                bool[] paramsRead = new bool[16];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[10] && ((object) Reader.LocalName == (object)id47_IsMandatory && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@IsMandatory = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                        o.@IsMandatorySpecified = true;
                        paramsRead[10] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id48_Aliases && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        string listValues = Reader.Value;
                        string[] vals = listValues.Split(null);
                        for (int i = 0; i < vals.Length; i++) {
                            a_11 = (global::System.String[])EnsureArrayIndex(a_11, ca_11, typeof(global::System.String));a_11[ca_11++] = vals[i];
                        }
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id49_PSName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@PSName = Reader.Value;
                        paramsRead[12] = true;
                    }
                    else if (!paramsRead[13] && ((object) Reader.LocalName == (object)id50_Position && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Position = CollapseWhitespace(Reader.Value);
                        paramsRead[13] = true;
                    }
                    else if (!paramsRead[14] && ((object) Reader.LocalName == (object)id51_ValueFromPipeline && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@ValueFromPipeline = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                        o.@ValueFromPipelineSpecified = true;
                        paramsRead[14] = true;
                    }
                    else if (!paramsRead[15] && ((object) Reader.LocalName == (object)id52_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@ValueFromPipelineByPropertyName = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                        o.@ValueFromPipelineByPropertyNameSpecified = true;
                        paramsRead[15] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":IsMandatory, :Aliases, :PSName, :Position, :ValueFromPipeline, :ValueFromPipelineByPropertyName");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    o.@Aliases = (global::System.String[])ShrinkArray(a_11, ca_11, typeof(global::System.String), true);
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations28 = 0;
                int readerCount28 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id55_AllowEmptyCollection && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@AllowEmptyCollection = Read1_Object(false, true);
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id56_AllowEmptyString && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@AllowEmptyString = Read1_Object(false, true);
                            paramsRead[1] = true;
                        }
                        else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id57_AllowNull && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@AllowNull = Read1_Object(false, true);
                            paramsRead[2] = true;
                        }
                        else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id58_ValidateNotNull && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateNotNull = Read1_Object(false, true);
                            paramsRead[3] = true;
                        }
                        else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id59_ValidateNotNullOrEmpty && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateNotNullOrEmpty = Read1_Object(false, true);
                            paramsRead[4] = true;
                        }
                        else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id60_ValidateCount && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateCount = Read4_Item(false, true);
                            paramsRead[5] = true;
                        }
                        else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id61_ValidateLength && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateLength = Read5_Item(false, true);
                            paramsRead[6] = true;
                        }
                        else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id62_ValidateRange && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateRange = Read6_Item(false, true);
                            paramsRead[7] = true;
                        }
                        else if (((object) Reader.LocalName == (object)id63_ValidateSet && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            if (!ReadNull()) {
                                global::System.String[] a_8_0 = null;
                                int ca_8_0 = 0;
                                if ((Reader.IsEmptyElement)) {
                                    Reader.Skip();
                                }
                                else {
                                    Reader.ReadStartElement();
                                    Reader.MoveToContent();
                                    int whileIterations29 = 0;
                                    int readerCount29 = ReaderCount;
                                    while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                        if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                            if (((object) Reader.LocalName == (object)id64_AllowedValue && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                                {
                                                    a_8_0 = (global::System.String[])EnsureArrayIndex(a_8_0, ca_8_0, typeof(global::System.String)); a_8_0[ca_8_0++] = Reader.ReadElementContentAsString();
                                                }
                                            }
                                            else {
                                                UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowedValue");
                                            }
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowedValue");
                                        }
                                        Reader.MoveToContent();
                                        CheckReaderCount(ref whileIterations29, ref readerCount29);
                                    }
                                ReadEndElement();
                                }
                                o.@ValidateSet = (global::System.String[])ShrinkArray(a_8_0, ca_8_0, typeof(global::System.String), false);
                            }
                        }
                        else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id65_Obsolete && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Obsolete = Read7_ObsoleteAttributeMetadata(false, true);
                            paramsRead[9] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyCollection, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyString, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNullOrEmpty, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateCount, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateLength, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateRange, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateSet, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyCollection, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyString, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNullOrEmpty, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateCount, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateLength, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateRange, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateSet, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations28, ref readerCount28);
                }
                o.@Aliases = (global::System.String[])ShrinkArray(a_11, ca_11, typeof(global::System.String), true);
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.TypeMetadata Read2_TypeMetadata(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id8_TypeMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.TypeMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.TypeMetadata();
                bool[] paramsRead = new bool[2];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id94_PSType && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@PSType = Reader.Value;
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id95_ETSType && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@ETSType = Reader.Value;
                        paramsRead[1] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":PSType, :ETSType");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations30 = 0;
                int readerCount30 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        UnknownNode((object)o, @"");
                    }
                    else {
                        UnknownNode((object)o, @"");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations30, ref readerCount30);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.CommonMethodMetadataReturnValue Read24_Item(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.CommonMethodMetadataReturnValue o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.CommonMethodMetadataReturnValue();
                bool[] paramsRead = new bool[2];
                while (Reader.MoveToNextAttribute()) {
                    if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o);
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations31 = 0;
                int readerCount31 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id92_Type && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Type = Read2_TypeMetadata(false, true);
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id30_CmdletOutputMetadata && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@CmdletOutputMetadata = Read23_CmdletOutputMetadata(false, true);
                            paramsRead[1] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletOutputMetadata");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletOutputMetadata");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations31, ref readerCount31);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadataCmdletMetadata Read33_Item(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadataCmdletMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadataCmdletMetadata();
                global::System.String[] a_3 = null;
                int ca_3 = 0;
                bool[] paramsRead = new bool[7];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[1] && ((object) Reader.LocalName == (object)id96_Verb && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Verb = Reader.Value;
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id97_Noun && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Noun = Reader.Value;
                        paramsRead[2] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id48_Aliases && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        string listValues = Reader.Value;
                        string[] vals = listValues.Split(null);
                        for (int i = 0; i < vals.Length; i++) {
                            a_3 = (global::System.String[])EnsureArrayIndex(a_3, ca_3, typeof(global::System.String));a_3[ca_3++] = vals[i];
                        }
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id23_ConfirmImpact && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@ConfirmImpact = Read20_ConfirmImpact(Reader.Value);
                        o.@ConfirmImpactSpecified = true;
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id98_HelpUri && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@HelpUri = CollapseWhitespace(Reader.Value);
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id99_DefaultCmdletParameterSet && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@DefaultCmdletParameterSet = Reader.Value;
                        paramsRead[6] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":Verb, :Noun, :Aliases, :ConfirmImpact, :HelpUri, :DefaultCmdletParameterSet");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    o.@Aliases = (global::System.String[])ShrinkArray(a_3, ca_3, typeof(global::System.String), true);
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations32 = 0;
                int readerCount32 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id65_Obsolete && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Obsolete = Read7_ObsoleteAttributeMetadata(false, true);
                            paramsRead[0] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations32, ref readerCount32);
                }
                o.@Aliases = (global::System.String[])ShrinkArray(a_3, ca_3, typeof(global::System.String), true);
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.ConfirmImpact Read20_ConfirmImpact(string s) {
                switch (s) {
                    case @"None": return global::Microsoft.PowerShell.Cmdletization.Xml.ConfirmImpact.@None;
                    case @"Low": return global::Microsoft.PowerShell.Cmdletization.Xml.ConfirmImpact.@Low;
                    case @"Medium": return global::Microsoft.PowerShell.Cmdletization.Xml.ConfirmImpact.@Medium;
                    case @"High": return global::Microsoft.PowerShell.Cmdletization.Xml.ConfirmImpact.@High;
                    default: throw CreateUnknownConstantException(s, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.ConfirmImpact));
                }
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodParameterMetadata Read25_Item(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id31_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodParameterMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodParameterMetadata();
                bool[] paramsRead = new bool[5];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[1] && ((object) Reader.LocalName == (object)id90_ParameterName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@ParameterName = Reader.Value;
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id91_DefaultValue && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@DefaultValue = Reader.Value;
                        paramsRead[2] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":ParameterName, :DefaultValue");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations33 = 0;
                int readerCount33 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id92_Type && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Type = Read2_TypeMetadata(false, true);
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id11_CmdletParameterMetadata && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@CmdletParameterMetadata = Read9_Item(false, true);
                            paramsRead[3] = true;
                        }
                        else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id30_CmdletOutputMetadata && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@CmdletOutputMetadata = Read23_CmdletOutputMetadata(false, true);
                            paramsRead[4] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletParameterMetadata, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletOutputMetadata");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletParameterMetadata, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletOutputMetadata");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations33, ref readerCount33);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataForInstanceMethodParameter Read9_Item(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id18_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataForInstanceMethodParameter o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataForInstanceMethodParameter();
                global::System.String[] a_8 = null;
                int ca_8 = 0;
                global::System.String[] a_11 = null;
                int ca_11 = 0;
                bool[] paramsRead = new bool[15];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[10] && ((object) Reader.LocalName == (object)id47_IsMandatory && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@IsMandatory = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                        o.@IsMandatorySpecified = true;
                        paramsRead[10] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id48_Aliases && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        string listValues = Reader.Value;
                        string[] vals = listValues.Split(null);
                        for (int i = 0; i < vals.Length; i++) {
                            a_11 = (global::System.String[])EnsureArrayIndex(a_11, ca_11, typeof(global::System.String));a_11[ca_11++] = vals[i];
                        }
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id49_PSName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@PSName = Reader.Value;
                        paramsRead[12] = true;
                    }
                    else if (!paramsRead[13] && ((object) Reader.LocalName == (object)id50_Position && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Position = CollapseWhitespace(Reader.Value);
                        paramsRead[13] = true;
                    }
                    else if (!paramsRead[14] && ((object) Reader.LocalName == (object)id52_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@ValueFromPipelineByPropertyName = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                        o.@ValueFromPipelineByPropertyNameSpecified = true;
                        paramsRead[14] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":IsMandatory, :Aliases, :PSName, :Position, :ValueFromPipelineByPropertyName");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    o.@Aliases = (global::System.String[])ShrinkArray(a_11, ca_11, typeof(global::System.String), true);
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations34 = 0;
                int readerCount34 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id55_AllowEmptyCollection && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@AllowEmptyCollection = Read1_Object(false, true);
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id56_AllowEmptyString && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@AllowEmptyString = Read1_Object(false, true);
                            paramsRead[1] = true;
                        }
                        else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id57_AllowNull && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@AllowNull = Read1_Object(false, true);
                            paramsRead[2] = true;
                        }
                        else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id58_ValidateNotNull && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateNotNull = Read1_Object(false, true);
                            paramsRead[3] = true;
                        }
                        else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id59_ValidateNotNullOrEmpty && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateNotNullOrEmpty = Read1_Object(false, true);
                            paramsRead[4] = true;
                        }
                        else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id60_ValidateCount && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateCount = Read4_Item(false, true);
                            paramsRead[5] = true;
                        }
                        else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id61_ValidateLength && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateLength = Read5_Item(false, true);
                            paramsRead[6] = true;
                        }
                        else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id62_ValidateRange && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateRange = Read6_Item(false, true);
                            paramsRead[7] = true;
                        }
                        else if (((object) Reader.LocalName == (object)id63_ValidateSet && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            if (!ReadNull()) {
                                global::System.String[] a_8_0 = null;
                                int ca_8_0 = 0;
                                if ((Reader.IsEmptyElement)) {
                                    Reader.Skip();
                                }
                                else {
                                    Reader.ReadStartElement();
                                    Reader.MoveToContent();
                                    int whileIterations35 = 0;
                                    int readerCount35 = ReaderCount;
                                    while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                        if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                            if (((object) Reader.LocalName == (object)id64_AllowedValue && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                                {
                                                    a_8_0 = (global::System.String[])EnsureArrayIndex(a_8_0, ca_8_0, typeof(global::System.String)); a_8_0[ca_8_0++] = Reader.ReadElementContentAsString();
                                                }
                                            }
                                            else {
                                                UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowedValue");
                                            }
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowedValue");
                                        }
                                        Reader.MoveToContent();
                                        CheckReaderCount(ref whileIterations35, ref readerCount35);
                                    }
                                ReadEndElement();
                                }
                                o.@ValidateSet = (global::System.String[])ShrinkArray(a_8_0, ca_8_0, typeof(global::System.String), false);
                            }
                        }
                        else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id65_Obsolete && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Obsolete = Read7_ObsoleteAttributeMetadata(false, true);
                            paramsRead[9] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyCollection, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyString, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNullOrEmpty, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateCount, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateLength, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateRange, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateSet, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyCollection, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyString, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNullOrEmpty, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateCount, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateLength, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateRange, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateSet, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations34, ref readerCount34);
                }
                o.@Aliases = (global::System.String[])ShrinkArray(a_11, ca_11, typeof(global::System.String), true);
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.QueryOption Read18_QueryOption(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id20_QueryOption && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.QueryOption o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.QueryOption();
                bool[] paramsRead = new bool[3];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[2] && ((object) Reader.LocalName == (object)id100_OptionName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@OptionName = Reader.Value;
                        paramsRead[2] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":OptionName");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations36 = 0;
                int readerCount36 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id92_Type && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Type = Read2_TypeMetadata(false, true);
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id11_CmdletParameterMetadata && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@CmdletParameterMetadata = Read11_Item(false, true);
                            paramsRead[1] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletParameterMetadata");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletParameterMetadata");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations36, ref readerCount36);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataForGetCmdletParameter Read11_Item(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id12_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id13_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read12_Item(isNullable, false);
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataForGetCmdletParameter o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataForGetCmdletParameter();
                global::System.String[] a_8 = null;
                int ca_8 = 0;
                global::System.String[] a_11 = null;
                int ca_11 = 0;
                global::System.String[] a_16 = null;
                int ca_16 = 0;
                bool[] paramsRead = new bool[17];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[10] && ((object) Reader.LocalName == (object)id47_IsMandatory && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@IsMandatory = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                        o.@IsMandatorySpecified = true;
                        paramsRead[10] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id48_Aliases && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        string listValues = Reader.Value;
                        string[] vals = listValues.Split(null);
                        for (int i = 0; i < vals.Length; i++) {
                            a_11 = (global::System.String[])EnsureArrayIndex(a_11, ca_11, typeof(global::System.String));a_11[ca_11++] = vals[i];
                        }
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id49_PSName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@PSName = Reader.Value;
                        paramsRead[12] = true;
                    }
                    else if (!paramsRead[13] && ((object) Reader.LocalName == (object)id50_Position && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Position = CollapseWhitespace(Reader.Value);
                        paramsRead[13] = true;
                    }
                    else if (!paramsRead[14] && ((object) Reader.LocalName == (object)id51_ValueFromPipeline && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@ValueFromPipeline = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                        o.@ValueFromPipelineSpecified = true;
                        paramsRead[14] = true;
                    }
                    else if (!paramsRead[15] && ((object) Reader.LocalName == (object)id52_Item && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@ValueFromPipelineByPropertyName = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                        o.@ValueFromPipelineByPropertyNameSpecified = true;
                        paramsRead[15] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id53_CmdletParameterSets && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        string listValues = Reader.Value;
                        string[] vals = listValues.Split(null);
                        for (int i = 0; i < vals.Length; i++) {
                            a_16 = (global::System.String[])EnsureArrayIndex(a_16, ca_16, typeof(global::System.String));a_16[ca_16++] = vals[i];
                        }
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":IsMandatory, :Aliases, :PSName, :Position, :ValueFromPipeline, :ValueFromPipelineByPropertyName, :CmdletParameterSets");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    o.@Aliases = (global::System.String[])ShrinkArray(a_11, ca_11, typeof(global::System.String), true);
                    o.@CmdletParameterSets = (global::System.String[])ShrinkArray(a_16, ca_16, typeof(global::System.String), true);
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations37 = 0;
                int readerCount37 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id55_AllowEmptyCollection && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@AllowEmptyCollection = Read1_Object(false, true);
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id56_AllowEmptyString && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@AllowEmptyString = Read1_Object(false, true);
                            paramsRead[1] = true;
                        }
                        else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id57_AllowNull && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@AllowNull = Read1_Object(false, true);
                            paramsRead[2] = true;
                        }
                        else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id58_ValidateNotNull && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateNotNull = Read1_Object(false, true);
                            paramsRead[3] = true;
                        }
                        else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id59_ValidateNotNullOrEmpty && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateNotNullOrEmpty = Read1_Object(false, true);
                            paramsRead[4] = true;
                        }
                        else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id60_ValidateCount && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateCount = Read4_Item(false, true);
                            paramsRead[5] = true;
                        }
                        else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id61_ValidateLength && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateLength = Read5_Item(false, true);
                            paramsRead[6] = true;
                        }
                        else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id62_ValidateRange && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateRange = Read6_Item(false, true);
                            paramsRead[7] = true;
                        }
                        else if (((object) Reader.LocalName == (object)id63_ValidateSet && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            if (!ReadNull()) {
                                global::System.String[] a_8_0 = null;
                                int ca_8_0 = 0;
                                if ((Reader.IsEmptyElement)) {
                                    Reader.Skip();
                                }
                                else {
                                    Reader.ReadStartElement();
                                    Reader.MoveToContent();
                                    int whileIterations38 = 0;
                                    int readerCount38 = ReaderCount;
                                    while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                        if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                            if (((object) Reader.LocalName == (object)id64_AllowedValue && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                                {
                                                    a_8_0 = (global::System.String[])EnsureArrayIndex(a_8_0, ca_8_0, typeof(global::System.String)); a_8_0[ca_8_0++] = Reader.ReadElementContentAsString();
                                                }
                                            }
                                            else {
                                                UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowedValue");
                                            }
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowedValue");
                                        }
                                        Reader.MoveToContent();
                                        CheckReaderCount(ref whileIterations38, ref readerCount38);
                                    }
                                ReadEndElement();
                                }
                                o.@ValidateSet = (global::System.String[])ShrinkArray(a_8_0, ca_8_0, typeof(global::System.String), false);
                            }
                        }
                        else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id65_Obsolete && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Obsolete = Read7_ObsoleteAttributeMetadata(false, true);
                            paramsRead[9] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyCollection, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyString, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNullOrEmpty, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateCount, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateLength, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateRange, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateSet, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyCollection, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyString, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNullOrEmpty, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateCount, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateLength, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateRange, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateSet, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations37, ref readerCount37);
                }
                o.@Aliases = (global::System.String[])ShrinkArray(a_11, ca_11, typeof(global::System.String), true);
                o.@CmdletParameterSets = (global::System.String[])ShrinkArray(a_16, ca_16, typeof(global::System.String), true);
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.Association Read17_Association(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id9_Association && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.Association o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.Association();
                bool[] paramsRead = new bool[4];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[1] && ((object) Reader.LocalName == (object)id9_Association && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Association1 = Reader.Value;
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id101_SourceRole && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@SourceRole = Reader.Value;
                        paramsRead[2] = true;
                    }
                    else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id102_ResultRole && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@ResultRole = Reader.Value;
                        paramsRead[3] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":Association, :SourceRole, :ResultRole");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations39 = 0;
                int readerCount39 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id103_AssociatedInstance && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@AssociatedInstance = Read16_AssociationAssociatedInstance(false, true);
                            paramsRead[0] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AssociatedInstance");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AssociatedInstance");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations39, ref readerCount39);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.AssociationAssociatedInstance Read16_AssociationAssociatedInstance(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.AssociationAssociatedInstance o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.AssociationAssociatedInstance();
                bool[] paramsRead = new bool[2];
                while (Reader.MoveToNextAttribute()) {
                    if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o);
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations40 = 0;
                int readerCount40 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id92_Type && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Type = Read2_TypeMetadata(false, true);
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id11_CmdletParameterMetadata && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@CmdletParameterMetadata = Read12_Item(false, true);
                            paramsRead[1] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletParameterMetadata");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletParameterMetadata");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations40, ref readerCount40);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.PropertyMetadata Read15_PropertyMetadata(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id7_PropertyMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.PropertyMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.PropertyMetadata();
                global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery[] a_1 = null;
                int ca_1 = 0;
                global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType[] choice_a_1 = null;
                int cchoice_a_1 = 0;
                bool[] paramsRead = new bool[3];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[2] && ((object) Reader.LocalName == (object)id104_PropertyName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@PropertyName = Reader.Value;
                        paramsRead[2] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":PropertyName");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    o.@Items = (global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery[])ShrinkArray(a_1, ca_1, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery), true);
                    o.@ItemsElementName = (global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType[])ShrinkArray(choice_a_1, cchoice_a_1, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType), true);
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations41 = 0;
                int readerCount41 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id92_Type && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Type = Read2_TypeMetadata(false, true);
                            paramsRead[0] = true;
                        }
                        else if (((object) Reader.LocalName == (object)id105_MaxValueQuery && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            a_1 = (global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery[])EnsureArrayIndex(a_1, ca_1, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery));a_1[ca_1++] = Read14_PropertyQuery(false, true);
                            choice_a_1 = (global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType[])EnsureArrayIndex(choice_a_1, cchoice_a_1, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType));choice_a_1[cchoice_a_1++] = global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType.@MaxValueQuery;
                        }
                        else if (((object) Reader.LocalName == (object)id106_RegularQuery && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            a_1 = (global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery[])EnsureArrayIndex(a_1, ca_1, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery));a_1[ca_1++] = Read13_WildcardablePropertyQuery(false, true);
                            choice_a_1 = (global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType[])EnsureArrayIndex(choice_a_1, cchoice_a_1, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType));choice_a_1[cchoice_a_1++] = global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType.@RegularQuery;
                        }
                        else if (((object) Reader.LocalName == (object)id107_ExcludeQuery && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            a_1 = (global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery[])EnsureArrayIndex(a_1, ca_1, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery));a_1[ca_1++] = Read13_WildcardablePropertyQuery(false, true);
                            choice_a_1 = (global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType[])EnsureArrayIndex(choice_a_1, cchoice_a_1, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType));choice_a_1[cchoice_a_1++] = global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType.@ExcludeQuery;
                        }
                        else if (((object) Reader.LocalName == (object)id108_MinValueQuery && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            a_1 = (global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery[])EnsureArrayIndex(a_1, ca_1, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery));a_1[ca_1++] = Read14_PropertyQuery(false, true);
                            choice_a_1 = (global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType[])EnsureArrayIndex(choice_a_1, cchoice_a_1, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType));choice_a_1[cchoice_a_1++] = global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType.@MinValueQuery;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:MaxValueQuery, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:RegularQuery, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ExcludeQuery, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:MinValueQuery");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:MaxValueQuery, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:RegularQuery, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ExcludeQuery, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:MinValueQuery");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations41, ref readerCount41);
                }
                o.@Items = (global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery[])ShrinkArray(a_1, ca_1, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery), true);
                o.@ItemsElementName = (global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType[])ShrinkArray(choice_a_1, cchoice_a_1, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.ItemsChoiceType), true);
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery Read14_PropertyQuery(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id35_PropertyQuery && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id36_WildcardablePropertyQuery && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read13_WildcardablePropertyQuery(isNullable, false);
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.PropertyQuery();
                bool[] paramsRead = new bool[1];
                while (Reader.MoveToNextAttribute()) {
                    if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o);
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations42 = 0;
                int readerCount42 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id11_CmdletParameterMetadata && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@CmdletParameterMetadata = Read12_Item(false, true);
                            paramsRead[0] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletParameterMetadata");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletParameterMetadata");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations42, ref readerCount42);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadata Read10_CmdletParameterMetadata(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id11_CmdletParameterMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id12_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read11_Item(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id13_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read12_Item(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id18_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read9_Item(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id19_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read8_Item(isNullable, false);
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadata();
                global::System.String[] a_8 = null;
                int ca_8 = 0;
                global::System.String[] a_11 = null;
                int ca_11 = 0;
                bool[] paramsRead = new bool[14];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[10] && ((object) Reader.LocalName == (object)id47_IsMandatory && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@IsMandatory = System.Xml.XmlConvert.ToBoolean(Reader.Value);
                        o.@IsMandatorySpecified = true;
                        paramsRead[10] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id48_Aliases && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        string listValues = Reader.Value;
                        string[] vals = listValues.Split(null);
                        for (int i = 0; i < vals.Length; i++) {
                            a_11 = (global::System.String[])EnsureArrayIndex(a_11, ca_11, typeof(global::System.String));a_11[ca_11++] = vals[i];
                        }
                    }
                    else if (!paramsRead[12] && ((object) Reader.LocalName == (object)id49_PSName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@PSName = Reader.Value;
                        paramsRead[12] = true;
                    }
                    else if (!paramsRead[13] && ((object) Reader.LocalName == (object)id50_Position && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Position = CollapseWhitespace(Reader.Value);
                        paramsRead[13] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":IsMandatory, :Aliases, :PSName, :Position");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    o.@Aliases = (global::System.String[])ShrinkArray(a_11, ca_11, typeof(global::System.String), true);
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations43 = 0;
                int readerCount43 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id55_AllowEmptyCollection && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@AllowEmptyCollection = Read1_Object(false, true);
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id56_AllowEmptyString && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@AllowEmptyString = Read1_Object(false, true);
                            paramsRead[1] = true;
                        }
                        else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id57_AllowNull && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@AllowNull = Read1_Object(false, true);
                            paramsRead[2] = true;
                        }
                        else if (!paramsRead[3] && ((object) Reader.LocalName == (object)id58_ValidateNotNull && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateNotNull = Read1_Object(false, true);
                            paramsRead[3] = true;
                        }
                        else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id59_ValidateNotNullOrEmpty && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateNotNullOrEmpty = Read1_Object(false, true);
                            paramsRead[4] = true;
                        }
                        else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id60_ValidateCount && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateCount = Read4_Item(false, true);
                            paramsRead[5] = true;
                        }
                        else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id61_ValidateLength && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateLength = Read5_Item(false, true);
                            paramsRead[6] = true;
                        }
                        else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id62_ValidateRange && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ValidateRange = Read6_Item(false, true);
                            paramsRead[7] = true;
                        }
                        else if (((object) Reader.LocalName == (object)id63_ValidateSet && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            if (!ReadNull()) {
                                global::System.String[] a_8_0 = null;
                                int ca_8_0 = 0;
                                if ((Reader.IsEmptyElement)) {
                                    Reader.Skip();
                                }
                                else {
                                    Reader.ReadStartElement();
                                    Reader.MoveToContent();
                                    int whileIterations44 = 0;
                                    int readerCount44 = ReaderCount;
                                    while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                        if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                            if (((object) Reader.LocalName == (object)id64_AllowedValue && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                                {
                                                    a_8_0 = (global::System.String[])EnsureArrayIndex(a_8_0, ca_8_0, typeof(global::System.String)); a_8_0[ca_8_0++] = Reader.ReadElementContentAsString();
                                                }
                                            }
                                            else {
                                                UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowedValue");
                                            }
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowedValue");
                                        }
                                        Reader.MoveToContent();
                                        CheckReaderCount(ref whileIterations44, ref readerCount44);
                                    }
                                ReadEndElement();
                                }
                                o.@ValidateSet = (global::System.String[])ShrinkArray(a_8_0, ca_8_0, typeof(global::System.String), false);
                            }
                        }
                        else if (!paramsRead[9] && ((object) Reader.LocalName == (object)id65_Obsolete && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Obsolete = Read7_ObsoleteAttributeMetadata(false, true);
                            paramsRead[9] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyCollection, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyString, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNullOrEmpty, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateCount, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateLength, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateRange, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateSet, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyCollection, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowEmptyString, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:AllowNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNull, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateNotNullOrEmpty, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateCount, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateLength, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateRange, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ValidateSet, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations43, ref readerCount43);
                }
                o.@Aliases = (global::System.String[])ShrinkArray(a_11, ca_11, typeof(global::System.String), true);
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.GetCmdletParameters Read19_GetCmdletParameters(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id6_GetCmdletParameters && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.GetCmdletParameters o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.GetCmdletParameters();
                global::Microsoft.PowerShell.Cmdletization.Xml.PropertyMetadata[] a_0 = null;
                int ca_0 = 0;
                global::Microsoft.PowerShell.Cmdletization.Xml.Association[] a_1 = null;
                int ca_1 = 0;
                global::Microsoft.PowerShell.Cmdletization.Xml.QueryOption[] a_2 = null;
                int ca_2 = 0;
                bool[] paramsRead = new bool[4];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[3] && ((object) Reader.LocalName == (object)id99_DefaultCmdletParameterSet && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@DefaultCmdletParameterSet = Reader.Value;
                        paramsRead[3] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":DefaultCmdletParameterSet");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations45 = 0;
                int readerCount45 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (((object) Reader.LocalName == (object)id109_QueryableProperties && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            if (!ReadNull()) {
                                global::Microsoft.PowerShell.Cmdletization.Xml.PropertyMetadata[] a_0_0 = null;
                                int ca_0_0 = 0;
                                if ((Reader.IsEmptyElement)) {
                                    Reader.Skip();
                                }
                                else {
                                    Reader.ReadStartElement();
                                    Reader.MoveToContent();
                                    int whileIterations46 = 0;
                                    int readerCount46 = ReaderCount;
                                    while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                        if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                            if (((object) Reader.LocalName == (object)id71_Property && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                                a_0_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.PropertyMetadata[])EnsureArrayIndex(a_0_0, ca_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.PropertyMetadata));a_0_0[ca_0_0++] = Read15_PropertyMetadata(false, true);
                                            }
                                            else {
                                                UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Property");
                                            }
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Property");
                                        }
                                        Reader.MoveToContent();
                                        CheckReaderCount(ref whileIterations46, ref readerCount46);
                                    }
                                ReadEndElement();
                                }
                                o.@QueryableProperties = (global::Microsoft.PowerShell.Cmdletization.Xml.PropertyMetadata[])ShrinkArray(a_0_0, ca_0_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.PropertyMetadata), false);
                            }
                        }
                        else if (((object) Reader.LocalName == (object)id110_QueryableAssociations && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            if (!ReadNull()) {
                                global::Microsoft.PowerShell.Cmdletization.Xml.Association[] a_1_0 = null;
                                int ca_1_0 = 0;
                                if ((Reader.IsEmptyElement)) {
                                    Reader.Skip();
                                }
                                else {
                                    Reader.ReadStartElement();
                                    Reader.MoveToContent();
                                    int whileIterations47 = 0;
                                    int readerCount47 = ReaderCount;
                                    while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                        if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                            if (((object) Reader.LocalName == (object)id9_Association && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                                a_1_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.Association[])EnsureArrayIndex(a_1_0, ca_1_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.Association));a_1_0[ca_1_0++] = Read17_Association(false, true);
                                            }
                                            else {
                                                UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Association");
                                            }
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Association");
                                        }
                                        Reader.MoveToContent();
                                        CheckReaderCount(ref whileIterations47, ref readerCount47);
                                    }
                                ReadEndElement();
                                }
                                o.@QueryableAssociations = (global::Microsoft.PowerShell.Cmdletization.Xml.Association[])ShrinkArray(a_1_0, ca_1_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.Association), false);
                            }
                        }
                        else if (((object) Reader.LocalName == (object)id111_QueryOptions && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            if (!ReadNull()) {
                                global::Microsoft.PowerShell.Cmdletization.Xml.QueryOption[] a_2_0 = null;
                                int ca_2_0 = 0;
                                if ((Reader.IsEmptyElement)) {
                                    Reader.Skip();
                                }
                                else {
                                    Reader.ReadStartElement();
                                    Reader.MoveToContent();
                                    int whileIterations48 = 0;
                                    int readerCount48 = ReaderCount;
                                    while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                        if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                            if (((object) Reader.LocalName == (object)id74_Option && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                                a_2_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.QueryOption[])EnsureArrayIndex(a_2_0, ca_2_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.QueryOption));a_2_0[ca_2_0++] = Read18_QueryOption(false, true);
                                            }
                                            else {
                                                UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Option");
                                            }
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Option");
                                        }
                                        Reader.MoveToContent();
                                        CheckReaderCount(ref whileIterations48, ref readerCount48);
                                    }
                                ReadEndElement();
                                }
                                o.@QueryOptions = (global::Microsoft.PowerShell.Cmdletization.Xml.QueryOption[])ShrinkArray(a_2_0, ca_2_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.QueryOption), false);
                            }
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:QueryableProperties, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:QueryableAssociations, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:QueryOptions");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:QueryableProperties, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:QueryableAssociations, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:QueryOptions");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations45, ref readerCount45);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadataCmdletMetadata Read45_Item(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id25_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadataCmdletMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadataCmdletMetadata();
                global::System.String[] a_3 = null;
                int ca_3 = 0;
                bool[] paramsRead = new bool[7];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[1] && ((object) Reader.LocalName == (object)id96_Verb && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Verb = Reader.Value;
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id97_Noun && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Noun = Reader.Value;
                        paramsRead[2] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id48_Aliases && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        string listValues = Reader.Value;
                        string[] vals = listValues.Split(null);
                        for (int i = 0; i < vals.Length; i++) {
                            a_3 = (global::System.String[])EnsureArrayIndex(a_3, ca_3, typeof(global::System.String));a_3[ca_3++] = vals[i];
                        }
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id23_ConfirmImpact && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@ConfirmImpact = Read20_ConfirmImpact(Reader.Value);
                        o.@ConfirmImpactSpecified = true;
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id98_HelpUri && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@HelpUri = CollapseWhitespace(Reader.Value);
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id99_DefaultCmdletParameterSet && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@DefaultCmdletParameterSet = Reader.Value;
                        paramsRead[6] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":Verb, :Noun, :Aliases, :ConfirmImpact, :HelpUri, :DefaultCmdletParameterSet");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    o.@Aliases = (global::System.String[])ShrinkArray(a_3, ca_3, typeof(global::System.String), true);
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations49 = 0;
                int readerCount49 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id65_Obsolete && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Obsolete = Read7_ObsoleteAttributeMetadata(false, true);
                            paramsRead[0] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations49, ref readerCount49);
                }
                o.@Aliases = (global::System.String[])ShrinkArray(a_3, ca_3, typeof(global::System.String), true);
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.CommonCmdletMetadata Read21_CommonCmdletMetadata(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id22_CommonCmdletMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id25_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read45_Item(isNullable, false);
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.CommonCmdletMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.CommonCmdletMetadata();
                global::System.String[] a_3 = null;
                int ca_3 = 0;
                bool[] paramsRead = new bool[6];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[1] && ((object) Reader.LocalName == (object)id96_Verb && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Verb = Reader.Value;
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id97_Noun && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Noun = Reader.Value;
                        paramsRead[2] = true;
                    }
                    else if (((object) Reader.LocalName == (object)id48_Aliases && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        string listValues = Reader.Value;
                        string[] vals = listValues.Split(null);
                        for (int i = 0; i < vals.Length; i++) {
                            a_3 = (global::System.String[])EnsureArrayIndex(a_3, ca_3, typeof(global::System.String));a_3[ca_3++] = vals[i];
                        }
                    }
                    else if (!paramsRead[4] && ((object) Reader.LocalName == (object)id23_ConfirmImpact && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@ConfirmImpact = Read20_ConfirmImpact(Reader.Value);
                        o.@ConfirmImpactSpecified = true;
                        paramsRead[4] = true;
                    }
                    else if (!paramsRead[5] && ((object) Reader.LocalName == (object)id98_HelpUri && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@HelpUri = CollapseWhitespace(Reader.Value);
                        paramsRead[5] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":Verb, :Noun, :Aliases, :ConfirmImpact, :HelpUri");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    o.@Aliases = (global::System.String[])ShrinkArray(a_3, ca_3, typeof(global::System.String), true);
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations50 = 0;
                int readerCount50 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id65_Obsolete && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Obsolete = Read7_ObsoleteAttributeMetadata(false, true);
                            paramsRead[0] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Obsolete");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations50, ref readerCount50);
                }
                o.@Aliases = (global::System.String[])ShrinkArray(a_3, ca_3, typeof(global::System.String), true);
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.GetCmdletMetadata Read22_GetCmdletMetadata(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id21_GetCmdletMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.GetCmdletMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.GetCmdletMetadata();
                bool[] paramsRead = new bool[2];
                while (Reader.MoveToNextAttribute()) {
                    if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o);
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations51 = 0;
                int readerCount51 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id84_CmdletMetadata && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@CmdletMetadata = Read21_CommonCmdletMetadata(false, true);
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id6_GetCmdletParameters && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@GetCmdletParameters = Read19_GetCmdletParameters(false, true);
                            paramsRead[1] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletMetadata, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:GetCmdletParameters");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletMetadata, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:GetCmdletParameters");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations51, ref readerCount51);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodMetadata Read30_InstanceMethodMetadata(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id33_InstanceMethodMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodMetadata();
                global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodParameterMetadata[] a_2 = null;
                int ca_2 = 0;
                bool[] paramsRead = new bool[3];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[1] && ((object) Reader.LocalName == (object)id86_MethodName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@MethodName = Reader.Value;
                        paramsRead[1] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":MethodName");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations52 = 0;
                int readerCount52 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id88_ReturnValue && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ReturnValue = Read24_Item(false, true);
                            paramsRead[0] = true;
                        }
                        else if (((object) Reader.LocalName == (object)id89_Parameters && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            if (!ReadNull()) {
                                global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodParameterMetadata[] a_2_0 = null;
                                int ca_2_0 = 0;
                                if ((Reader.IsEmptyElement)) {
                                    Reader.Skip();
                                }
                                else {
                                    Reader.ReadStartElement();
                                    Reader.MoveToContent();
                                    int whileIterations53 = 0;
                                    int readerCount53 = ReaderCount;
                                    while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                        if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                            if (((object) Reader.LocalName == (object)id76_Parameter && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                                a_2_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodParameterMetadata[])EnsureArrayIndex(a_2_0, ca_2_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodParameterMetadata));a_2_0[ca_2_0++] = Read25_Item(false, true);
                                            }
                                            else {
                                                UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Parameter");
                                            }
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Parameter");
                                        }
                                        Reader.MoveToContent();
                                        CheckReaderCount(ref whileIterations53, ref readerCount53);
                                    }
                                ReadEndElement();
                                }
                                o.@Parameters = (global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodParameterMetadata[])ShrinkArray(a_2_0, ca_2_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.InstanceMethodParameterMetadata), false);
                            }
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ReturnValue, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Parameters");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ReturnValue, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Parameters");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations52, ref readerCount52);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.CommonMethodMetadata Read29_CommonMethodMetadata(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id26_CommonMethodMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id33_InstanceMethodMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read30_InstanceMethodMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id27_StaticMethodMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read28_StaticMethodMetadata(isNullable, false);
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.CommonMethodMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.CommonMethodMetadata();
                bool[] paramsRead = new bool[2];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[1] && ((object) Reader.LocalName == (object)id86_MethodName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@MethodName = Reader.Value;
                        paramsRead[1] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":MethodName");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations54 = 0;
                int readerCount54 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id88_ReturnValue && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@ReturnValue = Read24_Item(false, true);
                            paramsRead[0] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ReturnValue");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:ReturnValue");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations54, ref readerCount54);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.CommonMethodParameterMetadata Read26_CommonMethodParameterMetadata(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id28_CommonMethodParameterMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id29_StaticMethodParameterMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read27_StaticMethodParameterMetadata(isNullable, false);
                else if (((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id31_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item))
                    return Read25_Item(isNullable, false);
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.CommonMethodParameterMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.CommonMethodParameterMetadata();
                bool[] paramsRead = new bool[3];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[1] && ((object) Reader.LocalName == (object)id90_ParameterName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@ParameterName = Reader.Value;
                        paramsRead[1] = true;
                    }
                    else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id91_DefaultValue && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@DefaultValue = Reader.Value;
                        paramsRead[2] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":ParameterName, :DefaultValue");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations55 = 0;
                int readerCount55 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id92_Type && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Type = Read2_TypeMetadata(false, true);
                            paramsRead[0] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations55, ref readerCount55);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata Read31_InstanceCmdletMetadata(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id34_InstanceCmdletMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata();
                bool[] paramsRead = new bool[3];
                while (Reader.MoveToNextAttribute()) {
                    if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o);
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations56 = 0;
                int readerCount56 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id84_CmdletMetadata && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@CmdletMetadata = Read21_CommonCmdletMetadata(false, true);
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id85_Method && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Method = Read30_InstanceMethodMetadata(false, true);
                            paramsRead[1] = true;
                        }
                        else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id6_GetCmdletParameters && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@GetCmdletParameters = Read19_GetCmdletParameters(false, true);
                            paramsRead[2] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletMetadata, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Method, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:GetCmdletParameters");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletMetadata, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Method, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:GetCmdletParameters");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations56, ref readerCount56);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadata Read36_ClassMetadata(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id3_ClassMetadata && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadata();
                global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadata[] a_3 = null;
                int ca_3 = 0;
                global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData[] a_4 = null;
                int ca_4 = 0;
                bool[] paramsRead = new bool[8];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[5] && ((object) Reader.LocalName == (object)id112_CmdletAdapter && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@CmdletAdapter = Reader.Value;
                        paramsRead[5] = true;
                    }
                    else if (!paramsRead[6] && ((object) Reader.LocalName == (object)id113_ClassName && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@ClassName = Reader.Value;
                        paramsRead[6] = true;
                    }
                    else if (!paramsRead[7] && ((object) Reader.LocalName == (object)id114_ClassVersion && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@ClassVersion = Reader.Value;
                        paramsRead[7] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":CmdletAdapter, :ClassName, :ClassVersion");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations57 = 0;
                int readerCount57 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id115_Version && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            {
                                o.@Version = Reader.ReadElementContentAsString();
                            }
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id116_DefaultNoun && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            {
                                o.@DefaultNoun = Reader.ReadElementContentAsString();
                            }
                            paramsRead[1] = true;
                        }
                        else if (!paramsRead[2] && ((object) Reader.LocalName == (object)id117_InstanceCmdlets && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@InstanceCmdlets = Read32_ClassMetadataInstanceCmdlets(false, true);
                            paramsRead[2] = true;
                        }
                        else if (((object) Reader.LocalName == (object)id118_StaticCmdlets && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            if (!ReadNull()) {
                                global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadata[] a_3_0 = null;
                                int ca_3_0 = 0;
                                if ((Reader.IsEmptyElement)) {
                                    Reader.Skip();
                                }
                                else {
                                    Reader.ReadStartElement();
                                    Reader.MoveToContent();
                                    int whileIterations58 = 0;
                                    int readerCount58 = ReaderCount;
                                    while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                        if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                            if (((object) Reader.LocalName == (object)id79_Cmdlet && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                                a_3_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadata[])EnsureArrayIndex(a_3_0, ca_3_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadata));a_3_0[ca_3_0++] = Read34_StaticCmdletMetadata(false, true);
                                            }
                                            else {
                                                UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Cmdlet");
                                            }
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Cmdlet");
                                        }
                                        Reader.MoveToContent();
                                        CheckReaderCount(ref whileIterations58, ref readerCount58);
                                    }
                                ReadEndElement();
                                }
                                o.@StaticCmdlets = (global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadata[])ShrinkArray(a_3_0, ca_3_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.StaticCmdletMetadata), false);
                            }
                        }
                        else if (((object) Reader.LocalName == (object)id119_CmdletAdapterPrivateData && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            if (!ReadNull()) {
                                global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData[] a_4_0 = null;
                                int ca_4_0 = 0;
                                if ((Reader.IsEmptyElement)) {
                                    Reader.Skip();
                                }
                                else {
                                    Reader.ReadStartElement();
                                    Reader.MoveToContent();
                                    int whileIterations59 = 0;
                                    int readerCount59 = ReaderCount;
                                    while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                        if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                            if (((object) Reader.LocalName == (object)id81_Data && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                                a_4_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData[])EnsureArrayIndex(a_4_0, ca_4_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData));a_4_0[ca_4_0++] = Read35_ClassMetadataData(false, true);
                                            }
                                            else {
                                                UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Data");
                                            }
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Data");
                                        }
                                        Reader.MoveToContent();
                                        CheckReaderCount(ref whileIterations59, ref readerCount59);
                                    }
                                ReadEndElement();
                                }
                                o.@CmdletAdapterPrivateData = (global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData[])ShrinkArray(a_4_0, ca_4_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataData), false);
                            }
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Version, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:DefaultNoun, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:InstanceCmdlets, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:StaticCmdlets, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletAdapterPrivateData");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Version, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:DefaultNoun, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:InstanceCmdlets, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:StaticCmdlets, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletAdapterPrivateData");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations57, ref readerCount57);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataInstanceCmdlets Read32_ClassMetadataInstanceCmdlets(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataInstanceCmdlets o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataInstanceCmdlets();
                global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata[] a_2 = null;
                int ca_2 = 0;
                bool[] paramsRead = new bool[3];
                while (Reader.MoveToNextAttribute()) {
                    if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o);
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    o.@Cmdlet = (global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata[])ShrinkArray(a_2, ca_2, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata), true);
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations60 = 0;
                int readerCount60 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id6_GetCmdletParameters && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@GetCmdletParameters = Read19_GetCmdletParameters(false, true);
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id120_GetCmdlet && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@GetCmdlet = Read22_GetCmdletMetadata(false, true);
                            paramsRead[1] = true;
                        }
                        else if (((object) Reader.LocalName == (object)id79_Cmdlet && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            a_2 = (global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata[])EnsureArrayIndex(a_2, ca_2, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata));a_2[ca_2++] = Read31_InstanceCmdletMetadata(false, true);
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:GetCmdletParameters, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:GetCmdlet, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Cmdlet");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:GetCmdletParameters, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:GetCmdlet, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Cmdlet");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations60, ref readerCount60);
                }
                o.@Cmdlet = (global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata[])ShrinkArray(a_2, ca_2, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata), true);
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataInstanceCmdlets Read40_ClassMetadataInstanceCmdlets(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id5_ClassMetadataInstanceCmdlets && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataInstanceCmdlets o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.ClassMetadataInstanceCmdlets();
                global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata[] a_2 = null;
                int ca_2 = 0;
                bool[] paramsRead = new bool[3];
                while (Reader.MoveToNextAttribute()) {
                    if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o);
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    o.@Cmdlet = (global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata[])ShrinkArray(a_2, ca_2, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata), true);
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations61 = 0;
                int readerCount61 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id6_GetCmdletParameters && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@GetCmdletParameters = Read19_GetCmdletParameters(false, true);
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id120_GetCmdlet && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@GetCmdlet = Read22_GetCmdletMetadata(false, true);
                            paramsRead[1] = true;
                        }
                        else if (((object) Reader.LocalName == (object)id79_Cmdlet && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            a_2 = (global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata[])EnsureArrayIndex(a_2, ca_2, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata));a_2[ca_2++] = Read31_InstanceCmdletMetadata(false, true);
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:GetCmdletParameters, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:GetCmdlet, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Cmdlet");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:GetCmdletParameters, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:GetCmdlet, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Cmdlet");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations61, ref readerCount61);
                }
                o.@Cmdlet = (global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata[])ShrinkArray(a_2, ca_2, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.InstanceCmdletMetadata), true);
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.AssociationAssociatedInstance Read41_AssociationAssociatedInstance(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id10_AssociationAssociatedInstance && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.AssociationAssociatedInstance o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.AssociationAssociatedInstance();
                bool[] paramsRead = new bool[2];
                while (Reader.MoveToNextAttribute()) {
                    if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o);
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations62 = 0;
                int readerCount62 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id92_Type && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Type = Read2_TypeMetadata(false, true);
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id11_CmdletParameterMetadata && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@CmdletParameterMetadata = Read12_Item(false, true);
                            paramsRead[1] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletParameterMetadata");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletParameterMetadata");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations62, ref readerCount62);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateCount Read42_Item(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id14_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateCount o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateCount();
                bool[] paramsRead = new bool[2];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id67_Min && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Min = CollapseWhitespace(Reader.Value);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id68_Max && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Max = CollapseWhitespace(Reader.Value);
                        paramsRead[1] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":Min, :Max");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations63 = 0;
                int readerCount63 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        UnknownNode((object)o, @"");
                    }
                    else {
                        UnknownNode((object)o, @"");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations63, ref readerCount63);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateLength Read43_Item(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id15_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateLength o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateLength();
                bool[] paramsRead = new bool[2];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id67_Min && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Min = CollapseWhitespace(Reader.Value);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id68_Max && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Max = CollapseWhitespace(Reader.Value);
                        paramsRead[1] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":Min, :Max");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations64 = 0;
                int readerCount64 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        UnknownNode((object)o, @"");
                    }
                    else {
                        UnknownNode((object)o, @"");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations64, ref readerCount64);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateRange Read44_Item(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id16_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateRange o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.CmdletParameterMetadataValidateRange();
                bool[] paramsRead = new bool[2];
                while (Reader.MoveToNextAttribute()) {
                    if (!paramsRead[0] && ((object) Reader.LocalName == (object)id67_Min && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Min = CollapseWhitespace(Reader.Value);
                        paramsRead[0] = true;
                    }
                    else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id68_Max && (object) Reader.NamespaceURI == (object)id4_Item)) {
                        o.@Max = CollapseWhitespace(Reader.Value);
                        paramsRead[1] = true;
                    }
                    else if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o, @":Min, :Max");
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations65 = 0;
                int readerCount65 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        UnknownNode((object)o, @"");
                    }
                    else {
                        UnknownNode((object)o, @"");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations65, ref readerCount65);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.CommonMethodMetadataReturnValue Read46_Item(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id32_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.CommonMethodMetadataReturnValue o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.CommonMethodMetadataReturnValue();
                bool[] paramsRead = new bool[2];
                while (Reader.MoveToNextAttribute()) {
                    if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o);
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations66 = 0;
                int readerCount66 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id92_Type && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Type = Read2_TypeMetadata(false, true);
                            paramsRead[0] = true;
                        }
                        else if (!paramsRead[1] && ((object) Reader.LocalName == (object)id30_CmdletOutputMetadata && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@CmdletOutputMetadata = Read23_CmdletOutputMetadata(false, true);
                            paramsRead[1] = true;
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletOutputMetadata");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Type, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:CmdletOutputMetadata");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations66, ref readerCount66);
                }
                ReadEndElement();
                return o;
            }

            global::Microsoft.PowerShell.Cmdletization.Xml.PowerShellMetadata Read39_PowerShellMetadata(bool isNullable, bool checkType) {
                System.Xml.XmlQualifiedName xsiType = checkType ? GetXsiType() : null;
                bool isNull = false;
                if (isNullable) isNull = ReadNull();
                if (checkType) {
                if (xsiType == null || ((object) ((System.Xml.XmlQualifiedName)xsiType).Name == (object)id4_Item && (object) ((System.Xml.XmlQualifiedName)xsiType).Namespace == (object)id2_Item)) {
                }
                else
                    throw CreateUnknownTypeException((System.Xml.XmlQualifiedName)xsiType);
                }
                if (isNull) return null;
                global::Microsoft.PowerShell.Cmdletization.Xml.PowerShellMetadata o;
                o = new global::Microsoft.PowerShell.Cmdletization.Xml.PowerShellMetadata();
                global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum[] a_1 = null;
                int ca_1 = 0;
                bool[] paramsRead = new bool[2];
                while (Reader.MoveToNextAttribute()) {
                    if (!IsXmlnsAttribute(Reader.Name)) {
                        UnknownNode((object)o);
                    }
                }
                Reader.MoveToElement();
                if (Reader.IsEmptyElement) {
                    Reader.Skip();
                    return o;
                }
                Reader.ReadStartElement();
                Reader.MoveToContent();
                int whileIterations67 = 0;
                int readerCount67 = ReaderCount;
                while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                    if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                        if (!paramsRead[0] && ((object) Reader.LocalName == (object)id121_Class && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            o.@Class = Read36_ClassMetadata(false, true);
                            paramsRead[0] = true;
                        }
                        else if (((object) Reader.LocalName == (object)id122_Enums && (object) Reader.NamespaceURI == (object)id2_Item)) {
                            if (!ReadNull()) {
                                global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum[] a_1_0 = null;
                                int ca_1_0 = 0;
                                if ((Reader.IsEmptyElement)) {
                                    Reader.Skip();
                                }
                                else {
                                    Reader.ReadStartElement();
                                    Reader.MoveToContent();
                                    int whileIterations68 = 0;
                                    int readerCount68 = ReaderCount;
                                    while (Reader.NodeType != System.Xml.XmlNodeType.EndElement && Reader.NodeType != System.Xml.XmlNodeType.None) {
                                        if (Reader.NodeType == System.Xml.XmlNodeType.Element) {
                                            if (((object) Reader.LocalName == (object)id83_Enum && (object) Reader.NamespaceURI == (object)id2_Item)) {
                                                a_1_0 = (global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum[])EnsureArrayIndex(a_1_0, ca_1_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum));a_1_0[ca_1_0++] = Read38_EnumMetadataEnum(false, true);
                                            }
                                            else {
                                                UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Enum");
                                            }
                                        }
                                        else {
                                            UnknownNode(null, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Enum");
                                        }
                                        Reader.MoveToContent();
                                        CheckReaderCount(ref whileIterations68, ref readerCount68);
                                    }
                                ReadEndElement();
                                }
                                o.@Enums = (global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum[])ShrinkArray(a_1_0, ca_1_0, typeof(global::Microsoft.PowerShell.Cmdletization.Xml.EnumMetadataEnum), false);
                            }
                        }
                        else {
                            UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Class, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Enums");
                        }
                    }
                    else {
                        UnknownNode((object)o, @"http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Class, http://schemas.microsoft.com/cmdlets-over-objects/2009/11:Enums");
                    }
                    Reader.MoveToContent();
                    CheckReaderCount(ref whileIterations67, ref readerCount67);
                }
                ReadEndElement();
                return o;
            }

            string id72_ArrayOfAssociation;
            string id46_AllowGlobbing;
            string id6_GetCmdletParameters;
            string id25_Item;
            string id62_ValidateRange;
            string id118_StaticCmdlets;
            string id58_ValidateNotNull;
            string id17_ObsoleteAttributeMetadata;
            string id49_PSName;
            string id116_DefaultNoun;
            string id38_ClassMetadataData;
            string id114_ClassVersion;
            string id66_Message;
            string id65_Obsolete;
            string id51_ValueFromPipeline;
            string id108_MinValueQuery;
            string id119_CmdletAdapterPrivateData;
            string id21_GetCmdletMetadata;
            string id120_GetCmdlet;
            string id67_Min;
            string id56_AllowEmptyString;
            string id30_CmdletOutputMetadata;
            string id106_RegularQuery;
            string id74_Option;
            string id75_Item;
            string id23_ConfirmImpact;
            string id117_InstanceCmdlets;
            string id83_Enum;
            string id40_EnumMetadataEnumValue;
            string id111_QueryOptions;
            string id34_InstanceCmdletMetadata;
            string id60_ValidateCount;
            string id45_BitwiseFlags;
            string id81_Data;
            string id31_Item;
            string id1_PowerShellMetadata;
            string id98_HelpUri;
            string id91_DefaultValue;
            string id4_Item;
            string id32_Item;
            string id43_EnumName;
            string id122_Enums;
            string id82_ArrayOfEnumMetadataEnum;
            string id14_Item;
            string id48_Aliases;
            string id115_Version;
            string id11_CmdletParameterMetadata;
            string id70_ArrayOfPropertyMetadata;
            string id9_Association;
            string id102_ResultRole;
            string id29_StaticMethodParameterMetadata;
            string id97_Noun;
            string id47_IsMandatory;
            string id35_PropertyQuery;
            string id54_ErrorOnNoMatch;
            string id3_ClassMetadata;
            string id77_Item;
            string id2_Item;
            string id22_CommonCmdletMetadata;
            string id37_ItemsChoiceType;
            string id36_WildcardablePropertyQuery;
            string id113_ClassName;
            string id64_AllowedValue;
            string id52_Item;
            string id55_AllowEmptyCollection;
            string id13_Item;
            string id76_Parameter;
            string id19_Item;
            string id105_MaxValueQuery;
            string id101_SourceRole;
            string id5_ClassMetadataInstanceCmdlets;
            string id112_CmdletAdapter;
            string id10_AssociationAssociatedInstance;
            string id93_ErrorCode;
            string id41_Name;
            string id68_Max;
            string id50_Position;
            string id100_OptionName;
            string id84_CmdletMetadata;
            string id87_CmdletParameterSet;
            string id104_PropertyName;
            string id28_CommonMethodParameterMetadata;
            string id107_ExcludeQuery;
            string id92_Type;
            string id33_InstanceMethodMetadata;
            string id63_ValidateSet;
            string id53_CmdletParameterSets;
            string id15_Item;
            string id109_QueryableProperties;
            string id57_AllowNull;
            string id80_ArrayOfClassMetadataData;
            string id99_DefaultCmdletParameterSet;
            string id20_QueryOption;
            string id89_Parameters;
            string id90_ParameterName;
            string id61_ValidateLength;
            string id78_ArrayOfStaticCmdletMetadata;
            string id16_Item;
            string id39_EnumMetadataEnum;
            string id7_PropertyMetadata;
            string id110_QueryableAssociations;
            string id86_MethodName;
            string id8_TypeMetadata;
            string id71_Property;
            string id27_StaticMethodMetadata;
            string id94_PSType;
            string id44_UnderlyingType;
            string id103_AssociatedInstance;
            string id79_Cmdlet;
            string id18_Item;
            string id85_Method;
            string id95_ETSType;
            string id26_CommonMethodMetadata;
            string id88_ReturnValue;
            string id69_ArrayOfString;
            string id24_StaticCmdletMetadata;
            string id59_ValidateNotNullOrEmpty;
            string id96_Verb;
            string id121_Class;
            string id73_ArrayOfQueryOption;
            string id12_Item;
            string id42_Value;

            private void InitIDs() {
                id72_ArrayOfAssociation = Reader.NameTable.Add(@"ArrayOfAssociation");
                id46_AllowGlobbing = Reader.NameTable.Add(@"AllowGlobbing");
                id6_GetCmdletParameters = Reader.NameTable.Add(@"GetCmdletParameters");
                id25_Item = Reader.NameTable.Add(@"StaticCmdletMetadataCmdletMetadata");
                id62_ValidateRange = Reader.NameTable.Add(@"ValidateRange");
                id118_StaticCmdlets = Reader.NameTable.Add(@"StaticCmdlets");
                id58_ValidateNotNull = Reader.NameTable.Add(@"ValidateNotNull");
                id17_ObsoleteAttributeMetadata = Reader.NameTable.Add(@"ObsoleteAttributeMetadata");
                id49_PSName = Reader.NameTable.Add(@"PSName");
                id116_DefaultNoun = Reader.NameTable.Add(@"DefaultNoun");
                id38_ClassMetadataData = Reader.NameTable.Add(@"ClassMetadataData");
                id114_ClassVersion = Reader.NameTable.Add(@"ClassVersion");
                id66_Message = Reader.NameTable.Add(@"Message");
                id65_Obsolete = Reader.NameTable.Add(@"Obsolete");
                id51_ValueFromPipeline = Reader.NameTable.Add(@"ValueFromPipeline");
                id108_MinValueQuery = Reader.NameTable.Add(@"MinValueQuery");
                id119_CmdletAdapterPrivateData = Reader.NameTable.Add(@"CmdletAdapterPrivateData");
                id21_GetCmdletMetadata = Reader.NameTable.Add(@"GetCmdletMetadata");
                id120_GetCmdlet = Reader.NameTable.Add(@"GetCmdlet");
                id67_Min = Reader.NameTable.Add(@"Min");
                id56_AllowEmptyString = Reader.NameTable.Add(@"AllowEmptyString");
                id30_CmdletOutputMetadata = Reader.NameTable.Add(@"CmdletOutputMetadata");
                id106_RegularQuery = Reader.NameTable.Add(@"RegularQuery");
                id74_Option = Reader.NameTable.Add(@"Option");
                id75_Item = Reader.NameTable.Add(@"ArrayOfStaticMethodParameterMetadata");
                id23_ConfirmImpact = Reader.NameTable.Add(@"ConfirmImpact");
                id117_InstanceCmdlets = Reader.NameTable.Add(@"InstanceCmdlets");
                id83_Enum = Reader.NameTable.Add(@"Enum");
                id40_EnumMetadataEnumValue = Reader.NameTable.Add(@"EnumMetadataEnumValue");
                id111_QueryOptions = Reader.NameTable.Add(@"QueryOptions");
                id34_InstanceCmdletMetadata = Reader.NameTable.Add(@"InstanceCmdletMetadata");
                id60_ValidateCount = Reader.NameTable.Add(@"ValidateCount");
                id45_BitwiseFlags = Reader.NameTable.Add(@"BitwiseFlags");
                id81_Data = Reader.NameTable.Add(@"Data");
                id31_Item = Reader.NameTable.Add(@"InstanceMethodParameterMetadata");
                id1_PowerShellMetadata = Reader.NameTable.Add(@"PowerShellMetadata");
                id98_HelpUri = Reader.NameTable.Add(@"HelpUri");
                id91_DefaultValue = Reader.NameTable.Add(@"DefaultValue");
                id4_Item = Reader.NameTable.Add(@"");
                id32_Item = Reader.NameTable.Add(@"CommonMethodMetadataReturnValue");
                id43_EnumName = Reader.NameTable.Add(@"EnumName");
                id122_Enums = Reader.NameTable.Add(@"Enums");
                id82_ArrayOfEnumMetadataEnum = Reader.NameTable.Add(@"ArrayOfEnumMetadataEnum");
                id14_Item = Reader.NameTable.Add(@"CmdletParameterMetadataValidateCount");
                id48_Aliases = Reader.NameTable.Add(@"Aliases");
                id115_Version = Reader.NameTable.Add(@"Version");
                id11_CmdletParameterMetadata = Reader.NameTable.Add(@"CmdletParameterMetadata");
                id70_ArrayOfPropertyMetadata = Reader.NameTable.Add(@"ArrayOfPropertyMetadata");
                id9_Association = Reader.NameTable.Add(@"Association");
                id102_ResultRole = Reader.NameTable.Add(@"ResultRole");
                id29_StaticMethodParameterMetadata = Reader.NameTable.Add(@"StaticMethodParameterMetadata");
                id97_Noun = Reader.NameTable.Add(@"Noun");
                id47_IsMandatory = Reader.NameTable.Add(@"IsMandatory");
                id35_PropertyQuery = Reader.NameTable.Add(@"PropertyQuery");
                id54_ErrorOnNoMatch = Reader.NameTable.Add(@"ErrorOnNoMatch");
                id3_ClassMetadata = Reader.NameTable.Add(@"ClassMetadata");
                id77_Item = Reader.NameTable.Add(@"ArrayOfInstanceMethodParameterMetadata");
                id2_Item = Reader.NameTable.Add(@"http://schemas.microsoft.com/cmdlets-over-objects/2009/11");
                id22_CommonCmdletMetadata = Reader.NameTable.Add(@"CommonCmdletMetadata");
                id37_ItemsChoiceType = Reader.NameTable.Add(@"ItemsChoiceType");
                id36_WildcardablePropertyQuery = Reader.NameTable.Add(@"WildcardablePropertyQuery");
                id113_ClassName = Reader.NameTable.Add(@"ClassName");
                id64_AllowedValue = Reader.NameTable.Add(@"AllowedValue");
                id52_Item = Reader.NameTable.Add(@"ValueFromPipelineByPropertyName");
                id55_AllowEmptyCollection = Reader.NameTable.Add(@"AllowEmptyCollection");
                id13_Item = Reader.NameTable.Add(@"CmdletParameterMetadataForGetCmdletFilteringParameter");
                id76_Parameter = Reader.NameTable.Add(@"Parameter");
                id19_Item = Reader.NameTable.Add(@"CmdletParameterMetadataForStaticMethodParameter");
                id105_MaxValueQuery = Reader.NameTable.Add(@"MaxValueQuery");
                id101_SourceRole = Reader.NameTable.Add(@"SourceRole");
                id5_ClassMetadataInstanceCmdlets = Reader.NameTable.Add(@"ClassMetadataInstanceCmdlets");
                id112_CmdletAdapter = Reader.NameTable.Add(@"CmdletAdapter");
                id10_AssociationAssociatedInstance = Reader.NameTable.Add(@"AssociationAssociatedInstance");
                id93_ErrorCode = Reader.NameTable.Add(@"ErrorCode");
                id41_Name = Reader.NameTable.Add(@"Name");
                id68_Max = Reader.NameTable.Add(@"Max");
                id50_Position = Reader.NameTable.Add(@"Position");
                id100_OptionName = Reader.NameTable.Add(@"OptionName");
                id84_CmdletMetadata = Reader.NameTable.Add(@"CmdletMetadata");
                id87_CmdletParameterSet = Reader.NameTable.Add(@"CmdletParameterSet");
                id104_PropertyName = Reader.NameTable.Add(@"PropertyName");
                id28_CommonMethodParameterMetadata = Reader.NameTable.Add(@"CommonMethodParameterMetadata");
                id107_ExcludeQuery = Reader.NameTable.Add(@"ExcludeQuery");
                id92_Type = Reader.NameTable.Add(@"Type");
                id33_InstanceMethodMetadata = Reader.NameTable.Add(@"InstanceMethodMetadata");
                id63_ValidateSet = Reader.NameTable.Add(@"ValidateSet");
                id53_CmdletParameterSets = Reader.NameTable.Add(@"CmdletParameterSets");
                id15_Item = Reader.NameTable.Add(@"CmdletParameterMetadataValidateLength");
                id109_QueryableProperties = Reader.NameTable.Add(@"QueryableProperties");
                id57_AllowNull = Reader.NameTable.Add(@"AllowNull");
                id80_ArrayOfClassMetadataData = Reader.NameTable.Add(@"ArrayOfClassMetadataData");
                id99_DefaultCmdletParameterSet = Reader.NameTable.Add(@"DefaultCmdletParameterSet");
                id20_QueryOption = Reader.NameTable.Add(@"QueryOption");
                id89_Parameters = Reader.NameTable.Add(@"Parameters");
                id90_ParameterName = Reader.NameTable.Add(@"ParameterName");
                id61_ValidateLength = Reader.NameTable.Add(@"ValidateLength");
                id78_ArrayOfStaticCmdletMetadata = Reader.NameTable.Add(@"ArrayOfStaticCmdletMetadata");
                id16_Item = Reader.NameTable.Add(@"CmdletParameterMetadataValidateRange");
                id39_EnumMetadataEnum = Reader.NameTable.Add(@"EnumMetadataEnum");
                id7_PropertyMetadata = Reader.NameTable.Add(@"PropertyMetadata");
                id110_QueryableAssociations = Reader.NameTable.Add(@"QueryableAssociations");
                id86_MethodName = Reader.NameTable.Add(@"MethodName");
                id8_TypeMetadata = Reader.NameTable.Add(@"TypeMetadata");
                id71_Property = Reader.NameTable.Add(@"Property");
                id27_StaticMethodMetadata = Reader.NameTable.Add(@"StaticMethodMetadata");
                id94_PSType = Reader.NameTable.Add(@"PSType");
                id44_UnderlyingType = Reader.NameTable.Add(@"UnderlyingType");
                id103_AssociatedInstance = Reader.NameTable.Add(@"AssociatedInstance");
                id79_Cmdlet = Reader.NameTable.Add(@"Cmdlet");
                id18_Item = Reader.NameTable.Add(@"CmdletParameterMetadataForInstanceMethodParameter");
                id85_Method = Reader.NameTable.Add(@"Method");
                id95_ETSType = Reader.NameTable.Add(@"ETSType");
                id26_CommonMethodMetadata = Reader.NameTable.Add(@"CommonMethodMetadata");
                id88_ReturnValue = Reader.NameTable.Add(@"ReturnValue");
                id69_ArrayOfString = Reader.NameTable.Add(@"ArrayOfString");
                id24_StaticCmdletMetadata = Reader.NameTable.Add(@"StaticCmdletMetadata");
                id59_ValidateNotNullOrEmpty = Reader.NameTable.Add(@"ValidateNotNullOrEmpty");
                id96_Verb = Reader.NameTable.Add(@"Verb");
                id121_Class = Reader.NameTable.Add(@"Class");
                id73_ArrayOfQueryOption = Reader.NameTable.Add(@"ArrayOfQueryOption");
                id12_Item = Reader.NameTable.Add(@"CmdletParameterMetadataForGetCmdletParameter");
                id42_Value = Reader.NameTable.Add(@"Value");
            }
        }

    internal sealed class PowerShellMetadataSerializer 
    {
        internal object Deserialize(XmlReader reader)
        {
            if (reader == null)
            {
                throw new ArgumentNullException("reader");
            }

            XmlSerializationReader1 cdxmlSerializationReader = new XmlSerializationReader1(reader);
            return cdxmlSerializationReader.Read50_PowerShellMetadata();
        }
    }
}
#endif

